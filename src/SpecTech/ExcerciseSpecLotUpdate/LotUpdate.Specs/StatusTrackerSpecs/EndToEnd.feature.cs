// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace PerfEx.Infrastructure.LotUpdate.Specs.StatusTrackerSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class N2NStatusTrackerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EndToEnd.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "N2N Status Tracker", @"Steps:
These steps create and initialize the StatusTracker
1. Create an instance of LotRetrieverFactory.
2. Create a StatusTracker instance.
3. Assign LotRetrieverFactory object to the property of the same name
of StatusTracker.
4. Call StatusTracker.Initialize() passing in the pollingUrl.

These steps using the status tracker to watch for updates.
5. Create an instance of ITrackingObserver implementation
(may be an instance of TrackingObserverBase derivatives).
6. Call ITrackingObserver.Initialize() passing the StatusTracker
as a parameter.
6.1 This method should call StatusTracker.Watch().
7. When the tracking ID has received, call ITrackingObserver.SetTrackingID().
8. Observes the incoming updates.
9. When done call StatusTracker.ReleaseWatch() passing in the ITrackingObserver
as a parameter.", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 30
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "TrackingID",
                        "Status"});
            table1.AddRow(new string[] {
                        "{51EB626B-D5B4-4AE4-9FD5-3D0208E4E42A}",
                        "OK"});
            table1.AddRow(new string[] {
                        "{0B4E7851-5EC1-4821-A4D2-F58B1F69F60F}",
                        ""});
#line 31
testRunner.Given("tracking information of lot# 2003 has data as shown in the table", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "TrackingID",
                        "Status"});
            table2.AddRow(new string[] {
                        "{8B6000E4-7522-4660-B840-DAA31E136C55}",
                        "OK"});
            table2.AddRow(new string[] {
                        "{24AB763D-0694-4304-ADBE-40067930B782}",
                        "OK"});
            table2.AddRow(new string[] {
                        "{181A88E1-30DA-4F64-8EC8-B9A325F18CEE}",
                        "OK"});
            table2.AddRow(new string[] {
                        "{4B103861-C7C8-4761-96F6-FB1EAC58CD69}",
                        "Timeout"});
#line 35
testRunner.And("tracking information of lot# 2004 has data as shown in the table", ((string)(null)), table2);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create and initialize the StatusTracker")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Status Tracker")]
        public virtual void CreateAndInitializeTheStatusTracker()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and initialize the StatusTracker", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
testRunner.Given("an instance of LotRetrieverFactory");
#line 23
testRunner.And("an instance of StatusTracker");
#line 24
testRunner.When("assign LotRetriverFactory to the property of the StatusTracker");
#line 25
testRunner.And("call StatusTracker.Initialize(\'http://localhost/getCurrentLotNo\')");
#line 26
testRunner.Then("StatusTracker.LotRetriverFactory should be set correctly");
#line 27
testRunner.And("LotRetriverFactory.PollingUrl should has the same value as the StatusTracker.Poll" +
                    "ingUrl");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Using the StatusTracker to watch for updates")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Status Tracker")]
        public virtual void UsingTheStatusTrackerToWatchForUpdates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using the StatusTracker to watch for updates", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
testRunner.Given("a StatusTracker has been created and initialized");
#line 44
testRunner.And("an instance of TrackingObserverBase derived class has been created");
#line 45
testRunner.And("the server current lot# is 2003");
#line 46
testRunner.When("call TrackingObserverBase.Initialize(statusTracker)");
#line 47
testRunner.And("call TrackingObserverBase.SetTrackingID({24AB763D-0694-4304-ADBE-40067930B782})");
#line 48
testRunner.And("the server current lot# is 2004");
#line 49
testRunner.Then("OnUpdateTrackingInformation should be called with the tracking information #{24AB" +
                    "763D-0694-4304-ADBE-40067930B782}");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
