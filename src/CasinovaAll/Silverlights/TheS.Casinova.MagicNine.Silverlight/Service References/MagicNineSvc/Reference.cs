//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace TheS.Casinova.MagicNineSvc {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListActiveGameRoundInfoCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.MagicNine.Commands")]
    public partial class ListActiveGameRoundInfoCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool ActiveField;
        
        private System.Collections.ObjectModel.ObservableCollection<TheS.Casinova.MagicNineSvc.GameRoundInformation> GameRoundInfosField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TheS.Casinova.MagicNineSvc.GameRoundInformation> GameRoundInfos {
            get {
                return this.GameRoundInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.GameRoundInfosField, value) != true)) {
                    this.GameRoundInfosField = value;
                    this.RaisePropertyChanged("GameRoundInfos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameRoundInformation", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.MagicNine.Models")]
    public partial class GameRoundInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool ActiveField;
        
        private System.DateTime EndTimeField;
        
        private int GamePotField;
        
        private int RoundIDField;
        
        private System.DateTime StartTimeField;
        
        private int WinnerPointField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamePot {
            get {
                return this.GamePotField;
            }
            set {
                if ((this.GamePotField.Equals(value) != true)) {
                    this.GamePotField = value;
                    this.RaisePropertyChanged("GamePot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WinnerPoint {
            get {
                return this.WinnerPointField;
            }
            set {
                if ((this.WinnerPointField.Equals(value) != true)) {
                    this.WinnerPointField = value;
                    this.RaisePropertyChanged("WinnerPoint");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListGamePlayAutoBetInfoCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.MagicNine.Commands")]
    public partial class ListGamePlayAutoBetInfoCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<TheS.Casinova.MagicNineSvc.GamePlayAutoBetInformation> GamePlayAutoBetField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TheS.Casinova.MagicNineSvc.GamePlayAutoBetInformation> GamePlayAutoBet {
            get {
                return this.GamePlayAutoBetField;
            }
            set {
                if ((object.ReferenceEquals(this.GamePlayAutoBetField, value) != true)) {
                    this.GamePlayAutoBetField = value;
                    this.RaisePropertyChanged("GamePlayAutoBet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GamePlayAutoBetInformation", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.MagicNine.Models")]
    public partial class GamePlayAutoBetInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AmountField;
        
        private int IntervalField;
        
        private int MoneyRefundField;
        
        private int RoundIDField;
        
        private System.Guid StopTrackingIDField;
        
        private System.Guid StratTrackingIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Interval {
            get {
                return this.IntervalField;
            }
            set {
                if ((this.IntervalField.Equals(value) != true)) {
                    this.IntervalField = value;
                    this.RaisePropertyChanged("Interval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MoneyRefund {
            get {
                return this.MoneyRefundField;
            }
            set {
                if ((this.MoneyRefundField.Equals(value) != true)) {
                    this.MoneyRefundField = value;
                    this.RaisePropertyChanged("MoneyRefund");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid StopTrackingID {
            get {
                return this.StopTrackingIDField;
            }
            set {
                if ((this.StopTrackingIDField.Equals(value) != true)) {
                    this.StopTrackingIDField = value;
                    this.RaisePropertyChanged("StopTrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid StratTrackingID {
            get {
                return this.StratTrackingIDField;
            }
            set {
                if ((this.StratTrackingIDField.Equals(value) != true)) {
                    this.StratTrackingIDField = value;
                    this.RaisePropertyChanged("StratTrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListBetLogCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.MagicNine.Commands")]
    public partial class ListBetLogCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<TheS.Casinova.MagicNineSvc.BetInformation> BetInformationsField;
        
        private int RoundIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TheS.Casinova.MagicNineSvc.BetInformation> BetInformations {
            get {
                return this.BetInformationsField;
            }
            set {
                if ((object.ReferenceEquals(this.BetInformationsField, value) != true)) {
                    this.BetInformationsField = value;
                    this.RaisePropertyChanged("BetInformations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BetInformation", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.MagicNine.Models")]
    public partial class BetInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime BetDateTimeField;
        
        private int BetOrderField;
        
        private int RoundIDField;
        
        private System.Guid TrackingIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BetDateTime {
            get {
                return this.BetDateTimeField;
            }
            set {
                if ((this.BetDateTimeField.Equals(value) != true)) {
                    this.BetDateTimeField = value;
                    this.RaisePropertyChanged("BetDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BetOrder {
            get {
                return this.BetOrderField;
            }
            set {
                if ((this.BetOrderField.Equals(value) != true)) {
                    this.BetOrderField = value;
                    this.RaisePropertyChanged("BetOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TrackingID {
            get {
                return this.TrackingIDField;
            }
            set {
                if ((this.TrackingIDField.Equals(value) != true)) {
                    this.TrackingIDField = value;
                    this.RaisePropertyChanged("TrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SingleBetCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.MagicNine.Commands")]
    public partial class SingleBetCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int RoundIDField;
        
        private System.Guid TrackingIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TrackingID {
            get {
                return this.TrackingIDField;
            }
            set {
                if ((this.TrackingIDField.Equals(value) != true)) {
                    this.TrackingIDField = value;
                    this.RaisePropertyChanged("TrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartAutoBetCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.MagicNine.Commands")]
    public partial class StartAutoBetCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AmountField;
        
        private int IntervalField;
        
        private int RoundIDField;
        
        private System.Guid StartTrackingIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Interval {
            get {
                return this.IntervalField;
            }
            set {
                if ((this.IntervalField.Equals(value) != true)) {
                    this.IntervalField = value;
                    this.RaisePropertyChanged("Interval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid StartTrackingID {
            get {
                return this.StartTrackingIDField;
            }
            set {
                if ((this.StartTrackingIDField.Equals(value) != true)) {
                    this.StartTrackingIDField = value;
                    this.RaisePropertyChanged("StartTrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StopAutoBetCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.MagicNine.Commands")]
    public partial class StopAutoBetCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int RoundIDField;
        
        private System.Guid StopTrackingIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid StopTrackingID {
            get {
                return this.StopTrackingIDField;
            }
            set {
                if ((this.StopTrackingIDField.Equals(value) != true)) {
                    this.StopTrackingIDField = value;
                    this.RaisePropertyChanged("StopTrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MagicNineSvc.IMagicNineService")]
    public interface IMagicNineService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMagicNineService/GetListActiveGameRound", ReplyAction="http://tempuri.org/IMagicNineService/GetListActiveGameRoundResponse")]
        System.IAsyncResult BeginGetListActiveGameRound(System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.MagicNineSvc.ListActiveGameRoundInfoCommand EndGetListActiveGameRound(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMagicNineService/GetListGamePlayAutoBetInformation", ReplyAction="http://tempuri.org/IMagicNineService/GetListGamePlayAutoBetInformationResponse")]
        System.IAsyncResult BeginGetListGamePlayAutoBetInformation(TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand cmd, System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand EndGetListGamePlayAutoBetInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMagicNineService/GetListBetLog", ReplyAction="http://tempuri.org/IMagicNineService/GetListBetLogResponse")]
        System.IAsyncResult BeginGetListBetLog(TheS.Casinova.MagicNineSvc.ListBetLogCommand cmd, System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.MagicNineSvc.ListBetLogCommand EndGetListBetLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMagicNineService/BetSingle", ReplyAction="http://tempuri.org/IMagicNineService/BetSingleResponse")]
        System.IAsyncResult BeginBetSingle(TheS.Casinova.MagicNineSvc.SingleBetCommand cmd, System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.MagicNineSvc.SingleBetCommand EndBetSingle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMagicNineService/AutoBetOn", ReplyAction="http://tempuri.org/IMagicNineService/AutoBetOnResponse")]
        System.IAsyncResult BeginAutoBetOn(TheS.Casinova.MagicNineSvc.StartAutoBetCommand cmd, System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.MagicNineSvc.StartAutoBetCommand EndAutoBetOn(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMagicNineService/AutoBetOff", ReplyAction="http://tempuri.org/IMagicNineService/AutoBetOffResponse")]
        System.IAsyncResult BeginAutoBetOff(TheS.Casinova.MagicNineSvc.StopAutoBetCommand cmd, System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.MagicNineSvc.StopAutoBetCommand EndAutoBetOff(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMagicNineServiceChannel : TheS.Casinova.MagicNineSvc.IMagicNineService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetListActiveGameRoundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetListActiveGameRoundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.MagicNineSvc.ListActiveGameRoundInfoCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.MagicNineSvc.ListActiveGameRoundInfoCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetListGamePlayAutoBetInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetListGamePlayAutoBetInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetListBetLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetListBetLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.MagicNineSvc.ListBetLogCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.MagicNineSvc.ListBetLogCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BetSingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BetSingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.MagicNineSvc.SingleBetCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.MagicNineSvc.SingleBetCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutoBetOnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutoBetOnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.MagicNineSvc.StartAutoBetCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.MagicNineSvc.StartAutoBetCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutoBetOffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutoBetOffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.MagicNineSvc.StopAutoBetCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.MagicNineSvc.StopAutoBetCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MagicNineServiceClient : System.ServiceModel.ClientBase<TheS.Casinova.MagicNineSvc.IMagicNineService>, TheS.Casinova.MagicNineSvc.IMagicNineService {
        
        private BeginOperationDelegate onBeginGetListActiveGameRoundDelegate;
        
        private EndOperationDelegate onEndGetListActiveGameRoundDelegate;
        
        private System.Threading.SendOrPostCallback onGetListActiveGameRoundCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetListGamePlayAutoBetInformationDelegate;
        
        private EndOperationDelegate onEndGetListGamePlayAutoBetInformationDelegate;
        
        private System.Threading.SendOrPostCallback onGetListGamePlayAutoBetInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetListBetLogDelegate;
        
        private EndOperationDelegate onEndGetListBetLogDelegate;
        
        private System.Threading.SendOrPostCallback onGetListBetLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginBetSingleDelegate;
        
        private EndOperationDelegate onEndBetSingleDelegate;
        
        private System.Threading.SendOrPostCallback onBetSingleCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutoBetOnDelegate;
        
        private EndOperationDelegate onEndAutoBetOnDelegate;
        
        private System.Threading.SendOrPostCallback onAutoBetOnCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutoBetOffDelegate;
        
        private EndOperationDelegate onEndAutoBetOffDelegate;
        
        private System.Threading.SendOrPostCallback onAutoBetOffCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MagicNineServiceClient() {
        }
        
        public MagicNineServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MagicNineServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MagicNineServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MagicNineServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetListActiveGameRoundCompletedEventArgs> GetListActiveGameRoundCompleted;
        
        public event System.EventHandler<GetListGamePlayAutoBetInformationCompletedEventArgs> GetListGamePlayAutoBetInformationCompleted;
        
        public event System.EventHandler<GetListBetLogCompletedEventArgs> GetListBetLogCompleted;
        
        public event System.EventHandler<BetSingleCompletedEventArgs> BetSingleCompleted;
        
        public event System.EventHandler<AutoBetOnCompletedEventArgs> AutoBetOnCompleted;
        
        public event System.EventHandler<AutoBetOffCompletedEventArgs> AutoBetOffCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.MagicNineSvc.IMagicNineService.BeginGetListActiveGameRound(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetListActiveGameRound(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.MagicNineSvc.ListActiveGameRoundInfoCommand TheS.Casinova.MagicNineSvc.IMagicNineService.EndGetListActiveGameRound(System.IAsyncResult result) {
            return base.Channel.EndGetListActiveGameRound(result);
        }
        
        private System.IAsyncResult OnBeginGetListActiveGameRound(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).BeginGetListActiveGameRound(callback, asyncState);
        }
        
        private object[] OnEndGetListActiveGameRound(System.IAsyncResult result) {
            TheS.Casinova.MagicNineSvc.ListActiveGameRoundInfoCommand retVal = ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).EndGetListActiveGameRound(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetListActiveGameRoundCompleted(object state) {
            if ((this.GetListActiveGameRoundCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetListActiveGameRoundCompleted(this, new GetListActiveGameRoundCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetListActiveGameRoundAsync() {
            this.GetListActiveGameRoundAsync(null);
        }
        
        public void GetListActiveGameRoundAsync(object userState) {
            if ((this.onBeginGetListActiveGameRoundDelegate == null)) {
                this.onBeginGetListActiveGameRoundDelegate = new BeginOperationDelegate(this.OnBeginGetListActiveGameRound);
            }
            if ((this.onEndGetListActiveGameRoundDelegate == null)) {
                this.onEndGetListActiveGameRoundDelegate = new EndOperationDelegate(this.OnEndGetListActiveGameRound);
            }
            if ((this.onGetListActiveGameRoundCompletedDelegate == null)) {
                this.onGetListActiveGameRoundCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListActiveGameRoundCompleted);
            }
            base.InvokeAsync(this.onBeginGetListActiveGameRoundDelegate, null, this.onEndGetListActiveGameRoundDelegate, this.onGetListActiveGameRoundCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.MagicNineSvc.IMagicNineService.BeginGetListGamePlayAutoBetInformation(TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand cmd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetListGamePlayAutoBetInformation(cmd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand TheS.Casinova.MagicNineSvc.IMagicNineService.EndGetListGamePlayAutoBetInformation(System.IAsyncResult result) {
            return base.Channel.EndGetListGamePlayAutoBetInformation(result);
        }
        
        private System.IAsyncResult OnBeginGetListGamePlayAutoBetInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand cmd = ((TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand)(inValues[0]));
            return ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).BeginGetListGamePlayAutoBetInformation(cmd, callback, asyncState);
        }
        
        private object[] OnEndGetListGamePlayAutoBetInformation(System.IAsyncResult result) {
            TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand retVal = ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).EndGetListGamePlayAutoBetInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetListGamePlayAutoBetInformationCompleted(object state) {
            if ((this.GetListGamePlayAutoBetInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetListGamePlayAutoBetInformationCompleted(this, new GetListGamePlayAutoBetInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetListGamePlayAutoBetInformationAsync(TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand cmd) {
            this.GetListGamePlayAutoBetInformationAsync(cmd, null);
        }
        
        public void GetListGamePlayAutoBetInformationAsync(TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand cmd, object userState) {
            if ((this.onBeginGetListGamePlayAutoBetInformationDelegate == null)) {
                this.onBeginGetListGamePlayAutoBetInformationDelegate = new BeginOperationDelegate(this.OnBeginGetListGamePlayAutoBetInformation);
            }
            if ((this.onEndGetListGamePlayAutoBetInformationDelegate == null)) {
                this.onEndGetListGamePlayAutoBetInformationDelegate = new EndOperationDelegate(this.OnEndGetListGamePlayAutoBetInformation);
            }
            if ((this.onGetListGamePlayAutoBetInformationCompletedDelegate == null)) {
                this.onGetListGamePlayAutoBetInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListGamePlayAutoBetInformationCompleted);
            }
            base.InvokeAsync(this.onBeginGetListGamePlayAutoBetInformationDelegate, new object[] {
                        cmd}, this.onEndGetListGamePlayAutoBetInformationDelegate, this.onGetListGamePlayAutoBetInformationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.MagicNineSvc.IMagicNineService.BeginGetListBetLog(TheS.Casinova.MagicNineSvc.ListBetLogCommand cmd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetListBetLog(cmd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.MagicNineSvc.ListBetLogCommand TheS.Casinova.MagicNineSvc.IMagicNineService.EndGetListBetLog(System.IAsyncResult result) {
            return base.Channel.EndGetListBetLog(result);
        }
        
        private System.IAsyncResult OnBeginGetListBetLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TheS.Casinova.MagicNineSvc.ListBetLogCommand cmd = ((TheS.Casinova.MagicNineSvc.ListBetLogCommand)(inValues[0]));
            return ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).BeginGetListBetLog(cmd, callback, asyncState);
        }
        
        private object[] OnEndGetListBetLog(System.IAsyncResult result) {
            TheS.Casinova.MagicNineSvc.ListBetLogCommand retVal = ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).EndGetListBetLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetListBetLogCompleted(object state) {
            if ((this.GetListBetLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetListBetLogCompleted(this, new GetListBetLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetListBetLogAsync(TheS.Casinova.MagicNineSvc.ListBetLogCommand cmd) {
            this.GetListBetLogAsync(cmd, null);
        }
        
        public void GetListBetLogAsync(TheS.Casinova.MagicNineSvc.ListBetLogCommand cmd, object userState) {
            if ((this.onBeginGetListBetLogDelegate == null)) {
                this.onBeginGetListBetLogDelegate = new BeginOperationDelegate(this.OnBeginGetListBetLog);
            }
            if ((this.onEndGetListBetLogDelegate == null)) {
                this.onEndGetListBetLogDelegate = new EndOperationDelegate(this.OnEndGetListBetLog);
            }
            if ((this.onGetListBetLogCompletedDelegate == null)) {
                this.onGetListBetLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListBetLogCompleted);
            }
            base.InvokeAsync(this.onBeginGetListBetLogDelegate, new object[] {
                        cmd}, this.onEndGetListBetLogDelegate, this.onGetListBetLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.MagicNineSvc.IMagicNineService.BeginBetSingle(TheS.Casinova.MagicNineSvc.SingleBetCommand cmd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBetSingle(cmd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.MagicNineSvc.SingleBetCommand TheS.Casinova.MagicNineSvc.IMagicNineService.EndBetSingle(System.IAsyncResult result) {
            return base.Channel.EndBetSingle(result);
        }
        
        private System.IAsyncResult OnBeginBetSingle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TheS.Casinova.MagicNineSvc.SingleBetCommand cmd = ((TheS.Casinova.MagicNineSvc.SingleBetCommand)(inValues[0]));
            return ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).BeginBetSingle(cmd, callback, asyncState);
        }
        
        private object[] OnEndBetSingle(System.IAsyncResult result) {
            TheS.Casinova.MagicNineSvc.SingleBetCommand retVal = ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).EndBetSingle(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBetSingleCompleted(object state) {
            if ((this.BetSingleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BetSingleCompleted(this, new BetSingleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BetSingleAsync(TheS.Casinova.MagicNineSvc.SingleBetCommand cmd) {
            this.BetSingleAsync(cmd, null);
        }
        
        public void BetSingleAsync(TheS.Casinova.MagicNineSvc.SingleBetCommand cmd, object userState) {
            if ((this.onBeginBetSingleDelegate == null)) {
                this.onBeginBetSingleDelegate = new BeginOperationDelegate(this.OnBeginBetSingle);
            }
            if ((this.onEndBetSingleDelegate == null)) {
                this.onEndBetSingleDelegate = new EndOperationDelegate(this.OnEndBetSingle);
            }
            if ((this.onBetSingleCompletedDelegate == null)) {
                this.onBetSingleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBetSingleCompleted);
            }
            base.InvokeAsync(this.onBeginBetSingleDelegate, new object[] {
                        cmd}, this.onEndBetSingleDelegate, this.onBetSingleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.MagicNineSvc.IMagicNineService.BeginAutoBetOn(TheS.Casinova.MagicNineSvc.StartAutoBetCommand cmd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutoBetOn(cmd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.MagicNineSvc.StartAutoBetCommand TheS.Casinova.MagicNineSvc.IMagicNineService.EndAutoBetOn(System.IAsyncResult result) {
            return base.Channel.EndAutoBetOn(result);
        }
        
        private System.IAsyncResult OnBeginAutoBetOn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TheS.Casinova.MagicNineSvc.StartAutoBetCommand cmd = ((TheS.Casinova.MagicNineSvc.StartAutoBetCommand)(inValues[0]));
            return ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).BeginAutoBetOn(cmd, callback, asyncState);
        }
        
        private object[] OnEndAutoBetOn(System.IAsyncResult result) {
            TheS.Casinova.MagicNineSvc.StartAutoBetCommand retVal = ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).EndAutoBetOn(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutoBetOnCompleted(object state) {
            if ((this.AutoBetOnCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutoBetOnCompleted(this, new AutoBetOnCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutoBetOnAsync(TheS.Casinova.MagicNineSvc.StartAutoBetCommand cmd) {
            this.AutoBetOnAsync(cmd, null);
        }
        
        public void AutoBetOnAsync(TheS.Casinova.MagicNineSvc.StartAutoBetCommand cmd, object userState) {
            if ((this.onBeginAutoBetOnDelegate == null)) {
                this.onBeginAutoBetOnDelegate = new BeginOperationDelegate(this.OnBeginAutoBetOn);
            }
            if ((this.onEndAutoBetOnDelegate == null)) {
                this.onEndAutoBetOnDelegate = new EndOperationDelegate(this.OnEndAutoBetOn);
            }
            if ((this.onAutoBetOnCompletedDelegate == null)) {
                this.onAutoBetOnCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutoBetOnCompleted);
            }
            base.InvokeAsync(this.onBeginAutoBetOnDelegate, new object[] {
                        cmd}, this.onEndAutoBetOnDelegate, this.onAutoBetOnCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.MagicNineSvc.IMagicNineService.BeginAutoBetOff(TheS.Casinova.MagicNineSvc.StopAutoBetCommand cmd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutoBetOff(cmd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.MagicNineSvc.StopAutoBetCommand TheS.Casinova.MagicNineSvc.IMagicNineService.EndAutoBetOff(System.IAsyncResult result) {
            return base.Channel.EndAutoBetOff(result);
        }
        
        private System.IAsyncResult OnBeginAutoBetOff(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TheS.Casinova.MagicNineSvc.StopAutoBetCommand cmd = ((TheS.Casinova.MagicNineSvc.StopAutoBetCommand)(inValues[0]));
            return ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).BeginAutoBetOff(cmd, callback, asyncState);
        }
        
        private object[] OnEndAutoBetOff(System.IAsyncResult result) {
            TheS.Casinova.MagicNineSvc.StopAutoBetCommand retVal = ((TheS.Casinova.MagicNineSvc.IMagicNineService)(this)).EndAutoBetOff(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutoBetOffCompleted(object state) {
            if ((this.AutoBetOffCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutoBetOffCompleted(this, new AutoBetOffCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutoBetOffAsync(TheS.Casinova.MagicNineSvc.StopAutoBetCommand cmd) {
            this.AutoBetOffAsync(cmd, null);
        }
        
        public void AutoBetOffAsync(TheS.Casinova.MagicNineSvc.StopAutoBetCommand cmd, object userState) {
            if ((this.onBeginAutoBetOffDelegate == null)) {
                this.onBeginAutoBetOffDelegate = new BeginOperationDelegate(this.OnBeginAutoBetOff);
            }
            if ((this.onEndAutoBetOffDelegate == null)) {
                this.onEndAutoBetOffDelegate = new EndOperationDelegate(this.OnEndAutoBetOff);
            }
            if ((this.onAutoBetOffCompletedDelegate == null)) {
                this.onAutoBetOffCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutoBetOffCompleted);
            }
            base.InvokeAsync(this.onBeginAutoBetOffDelegate, new object[] {
                        cmd}, this.onEndAutoBetOffDelegate, this.onAutoBetOffCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TheS.Casinova.MagicNineSvc.IMagicNineService CreateChannel() {
            return new MagicNineServiceClientChannel(this);
        }
        
        private class MagicNineServiceClientChannel : ChannelBase<TheS.Casinova.MagicNineSvc.IMagicNineService>, TheS.Casinova.MagicNineSvc.IMagicNineService {
            
            public MagicNineServiceClientChannel(System.ServiceModel.ClientBase<TheS.Casinova.MagicNineSvc.IMagicNineService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetListActiveGameRound(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetListActiveGameRound", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.MagicNineSvc.ListActiveGameRoundInfoCommand EndGetListActiveGameRound(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.MagicNineSvc.ListActiveGameRoundInfoCommand _result = ((TheS.Casinova.MagicNineSvc.ListActiveGameRoundInfoCommand)(base.EndInvoke("GetListActiveGameRound", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetListGamePlayAutoBetInformation(TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand cmd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cmd;
                System.IAsyncResult _result = base.BeginInvoke("GetListGamePlayAutoBetInformation", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand EndGetListGamePlayAutoBetInformation(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand _result = ((TheS.Casinova.MagicNineSvc.ListGamePlayAutoBetInfoCommand)(base.EndInvoke("GetListGamePlayAutoBetInformation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetListBetLog(TheS.Casinova.MagicNineSvc.ListBetLogCommand cmd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cmd;
                System.IAsyncResult _result = base.BeginInvoke("GetListBetLog", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.MagicNineSvc.ListBetLogCommand EndGetListBetLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.MagicNineSvc.ListBetLogCommand _result = ((TheS.Casinova.MagicNineSvc.ListBetLogCommand)(base.EndInvoke("GetListBetLog", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBetSingle(TheS.Casinova.MagicNineSvc.SingleBetCommand cmd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cmd;
                System.IAsyncResult _result = base.BeginInvoke("BetSingle", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.MagicNineSvc.SingleBetCommand EndBetSingle(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.MagicNineSvc.SingleBetCommand _result = ((TheS.Casinova.MagicNineSvc.SingleBetCommand)(base.EndInvoke("BetSingle", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAutoBetOn(TheS.Casinova.MagicNineSvc.StartAutoBetCommand cmd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cmd;
                System.IAsyncResult _result = base.BeginInvoke("AutoBetOn", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.MagicNineSvc.StartAutoBetCommand EndAutoBetOn(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.MagicNineSvc.StartAutoBetCommand _result = ((TheS.Casinova.MagicNineSvc.StartAutoBetCommand)(base.EndInvoke("AutoBetOn", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAutoBetOff(TheS.Casinova.MagicNineSvc.StopAutoBetCommand cmd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cmd;
                System.IAsyncResult _result = base.BeginInvoke("AutoBetOff", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.MagicNineSvc.StopAutoBetCommand EndAutoBetOff(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.MagicNineSvc.StopAutoBetCommand _result = ((TheS.Casinova.MagicNineSvc.StopAutoBetCommand)(base.EndInvoke("AutoBetOff", _args, result)));
                return _result;
            }
        }
    }
}
