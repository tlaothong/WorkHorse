//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace TheS.Casinova.ColorsSvc {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListActiveGameRoundCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.Colors.Commands")]
    public partial class ListActiveGameRoundCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TheS.Casinova.ColorsSvc.GameRoundInformation[] ActiveRoundsField;
        
        private System.DateTime FromTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TheS.Casinova.ColorsSvc.GameRoundInformation[] ActiveRounds {
            get {
                return this.ActiveRoundsField;
            }
            set {
                if ((object.ReferenceEquals(this.ActiveRoundsField, value) != true)) {
                    this.ActiveRoundsField = value;
                    this.RaisePropertyChanged("ActiveRounds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromTime {
            get {
                return this.FromTimeField;
            }
            set {
                if ((this.FromTimeField.Equals(value) != true)) {
                    this.FromTimeField = value;
                    this.RaisePropertyChanged("FromTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameRoundInformation", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.Colors.Models")]
    public partial class GameRoundInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double BlackPotField;
        
        private System.DateTime EndTimeField;
        
        private int HandCountField;
        
        private int RoundIDField;
        
        private System.DateTime StartTimeField;
        
        private double WhitePotField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BlackPot {
            get {
                return this.BlackPotField;
            }
            set {
                if ((this.BlackPotField.Equals(value) != true)) {
                    this.BlackPotField = value;
                    this.RaisePropertyChanged("BlackPot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HandCount {
            get {
                return this.HandCountField;
            }
            set {
                if ((this.HandCountField.Equals(value) != true)) {
                    this.HandCountField = value;
                    this.RaisePropertyChanged("HandCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WhitePot {
            get {
                return this.WhitePotField;
            }
            set {
                if ((this.WhitePotField.Equals(value) != true)) {
                    this.WhitePotField = value;
                    this.RaisePropertyChanged("WhitePot");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListGamePlayInfoCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.Colors.Commands")]
    public partial class ListGamePlayInfoCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TheS.Casinova.ColorsSvc.GamePlayInformation[] GamePlayInfosField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TheS.Casinova.ColorsSvc.GamePlayInformation[] GamePlayInfos {
            get {
                return this.GamePlayInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.GamePlayInfosField, value) != true)) {
                    this.GamePlayInfosField = value;
                    this.RaisePropertyChanged("GamePlayInfos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GamePlayInformation", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.Colors.Models")]
    public partial class GamePlayInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime LastUpdateField;
        
        private System.Guid OnGoingTrackingIDField;
        
        private int RoundIDField;
        
        private int TableIDField;
        
        private double TotalBetAmountOfBlackField;
        
        private double TotalBetAmountOfWhiteField;
        
        private System.Guid TrackingIDField;
        
        private string UserNameField;
        
        private string WinnerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdate {
            get {
                return this.LastUpdateField;
            }
            set {
                if ((this.LastUpdateField.Equals(value) != true)) {
                    this.LastUpdateField = value;
                    this.RaisePropertyChanged("LastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OnGoingTrackingID {
            get {
                return this.OnGoingTrackingIDField;
            }
            set {
                if ((this.OnGoingTrackingIDField.Equals(value) != true)) {
                    this.OnGoingTrackingIDField = value;
                    this.RaisePropertyChanged("OnGoingTrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TableID {
            get {
                return this.TableIDField;
            }
            set {
                if ((this.TableIDField.Equals(value) != true)) {
                    this.TableIDField = value;
                    this.RaisePropertyChanged("TableID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalBetAmountOfBlack {
            get {
                return this.TotalBetAmountOfBlackField;
            }
            set {
                if ((this.TotalBetAmountOfBlackField.Equals(value) != true)) {
                    this.TotalBetAmountOfBlackField = value;
                    this.RaisePropertyChanged("TotalBetAmountOfBlack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalBetAmountOfWhite {
            get {
                return this.TotalBetAmountOfWhiteField;
            }
            set {
                if ((this.TotalBetAmountOfWhiteField.Equals(value) != true)) {
                    this.TotalBetAmountOfWhiteField = value;
                    this.RaisePropertyChanged("TotalBetAmountOfWhite");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TrackingID {
            get {
                return this.TrackingIDField;
            }
            set {
                if ((this.TrackingIDField.Equals(value) != true)) {
                    this.TrackingIDField = value;
                    this.RaisePropertyChanged("TrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Winner {
            get {
                return this.WinnerField;
            }
            set {
                if ((object.ReferenceEquals(this.WinnerField, value) != true)) {
                    this.WinnerField = value;
                    this.RaisePropertyChanged("Winner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetGameResultCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.Colors.Commands")]
    public partial class GetGameResultCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TheS.Casinova.ColorsSvc.GameRoundInformation GameResultField;
        
        private int RoundIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TheS.Casinova.ColorsSvc.GameRoundInformation GameResult {
            get {
                return this.GameResultField;
            }
            set {
                if ((object.ReferenceEquals(this.GameResultField, value) != true)) {
                    this.GameResultField = value;
                    this.RaisePropertyChanged("GameResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PayForColorsWinnerInfoCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.Colors.Commands")]
    public partial class PayForColorsWinnerInfoCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid OnGoingTrackingIDField;
        
        private int RoundIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OnGoingTrackingID {
            get {
                return this.OnGoingTrackingIDField;
            }
            set {
                if ((this.OnGoingTrackingIDField.Equals(value) != true)) {
                    this.OnGoingTrackingIDField = value;
                    this.RaisePropertyChanged("OnGoingTrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BetCommand", Namespace="http://schemas.datacontract.org/2004/07/TheS.Casinova.Colors.Commands")]
    public partial class BetCommand : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AmountField;
        
        private string ColorField;
        
        private int RoundIDField;
        
        private System.Guid TrackingIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TrackingID {
            get {
                return this.TrackingIDField;
            }
            set {
                if ((this.TrackingIDField.Equals(value) != true)) {
                    this.TrackingIDField = value;
                    this.RaisePropertyChanged("TrackingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ColorsSvc.IColorsService")]
    public interface IColorsService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IColorsService/GetListActiveGameRound", ReplyAction="http://tempuri.org/IColorsService/GetListActiveGameRoundResponse")]
        System.IAsyncResult BeginGetListActiveGameRound(System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.ColorsSvc.ListActiveGameRoundCommand EndGetListActiveGameRound(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IColorsService/GetListGamePlayInformation", ReplyAction="http://tempuri.org/IColorsService/GetListGamePlayInformationResponse")]
        System.IAsyncResult BeginGetListGamePlayInformation(TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand cmd, System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand EndGetListGamePlayInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IColorsService/GetGameResult", ReplyAction="http://tempuri.org/IColorsService/GetGameResultResponse")]
        System.IAsyncResult BeginGetGameResult(TheS.Casinova.ColorsSvc.GetGameResultCommand cmd, System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.ColorsSvc.GetGameResultCommand EndGetGameResult(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IColorsService/GetWinnerInformation", ReplyAction="http://tempuri.org/IColorsService/GetWinnerInformationResponse")]
        System.IAsyncResult BeginGetWinnerInformation(TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand cmd, System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand EndGetWinnerInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IColorsService/Bet", ReplyAction="http://tempuri.org/IColorsService/BetResponse")]
        System.IAsyncResult BeginBet(TheS.Casinova.ColorsSvc.BetCommand cmd, System.AsyncCallback callback, object asyncState);
        
        TheS.Casinova.ColorsSvc.BetCommand EndBet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IColorsServiceChannel : TheS.Casinova.ColorsSvc.IColorsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetListActiveGameRoundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetListActiveGameRoundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.ColorsSvc.ListActiveGameRoundCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.ColorsSvc.ListActiveGameRoundCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetListGamePlayInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetListGamePlayInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGameResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGameResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.ColorsSvc.GetGameResultCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.ColorsSvc.GetGameResultCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWinnerInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWinnerInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TheS.Casinova.ColorsSvc.BetCommand Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TheS.Casinova.ColorsSvc.BetCommand)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ColorsServiceClient : System.ServiceModel.ClientBase<TheS.Casinova.ColorsSvc.IColorsService>, TheS.Casinova.ColorsSvc.IColorsService {
        
        private BeginOperationDelegate onBeginGetListActiveGameRoundDelegate;
        
        private EndOperationDelegate onEndGetListActiveGameRoundDelegate;
        
        private System.Threading.SendOrPostCallback onGetListActiveGameRoundCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetListGamePlayInformationDelegate;
        
        private EndOperationDelegate onEndGetListGamePlayInformationDelegate;
        
        private System.Threading.SendOrPostCallback onGetListGamePlayInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGameResultDelegate;
        
        private EndOperationDelegate onEndGetGameResultDelegate;
        
        private System.Threading.SendOrPostCallback onGetGameResultCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWinnerInformationDelegate;
        
        private EndOperationDelegate onEndGetWinnerInformationDelegate;
        
        private System.Threading.SendOrPostCallback onGetWinnerInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginBetDelegate;
        
        private EndOperationDelegate onEndBetDelegate;
        
        private System.Threading.SendOrPostCallback onBetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ColorsServiceClient() {
        }
        
        public ColorsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ColorsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ColorsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ColorsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetListActiveGameRoundCompletedEventArgs> GetListActiveGameRoundCompleted;
        
        public event System.EventHandler<GetListGamePlayInformationCompletedEventArgs> GetListGamePlayInformationCompleted;
        
        public event System.EventHandler<GetGameResultCompletedEventArgs> GetGameResultCompleted;
        
        public event System.EventHandler<GetWinnerInformationCompletedEventArgs> GetWinnerInformationCompleted;
        
        public event System.EventHandler<BetCompletedEventArgs> BetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.ColorsSvc.IColorsService.BeginGetListActiveGameRound(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetListActiveGameRound(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.ColorsSvc.ListActiveGameRoundCommand TheS.Casinova.ColorsSvc.IColorsService.EndGetListActiveGameRound(System.IAsyncResult result) {
            return base.Channel.EndGetListActiveGameRound(result);
        }
        
        private System.IAsyncResult OnBeginGetListActiveGameRound(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TheS.Casinova.ColorsSvc.IColorsService)(this)).BeginGetListActiveGameRound(callback, asyncState);
        }
        
        private object[] OnEndGetListActiveGameRound(System.IAsyncResult result) {
            TheS.Casinova.ColorsSvc.ListActiveGameRoundCommand retVal = ((TheS.Casinova.ColorsSvc.IColorsService)(this)).EndGetListActiveGameRound(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetListActiveGameRoundCompleted(object state) {
            if ((this.GetListActiveGameRoundCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetListActiveGameRoundCompleted(this, new GetListActiveGameRoundCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetListActiveGameRoundAsync() {
            this.GetListActiveGameRoundAsync(null);
        }
        
        public void GetListActiveGameRoundAsync(object userState) {
            if ((this.onBeginGetListActiveGameRoundDelegate == null)) {
                this.onBeginGetListActiveGameRoundDelegate = new BeginOperationDelegate(this.OnBeginGetListActiveGameRound);
            }
            if ((this.onEndGetListActiveGameRoundDelegate == null)) {
                this.onEndGetListActiveGameRoundDelegate = new EndOperationDelegate(this.OnEndGetListActiveGameRound);
            }
            if ((this.onGetListActiveGameRoundCompletedDelegate == null)) {
                this.onGetListActiveGameRoundCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListActiveGameRoundCompleted);
            }
            base.InvokeAsync(this.onBeginGetListActiveGameRoundDelegate, null, this.onEndGetListActiveGameRoundDelegate, this.onGetListActiveGameRoundCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.ColorsSvc.IColorsService.BeginGetListGamePlayInformation(TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand cmd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetListGamePlayInformation(cmd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand TheS.Casinova.ColorsSvc.IColorsService.EndGetListGamePlayInformation(System.IAsyncResult result) {
            return base.Channel.EndGetListGamePlayInformation(result);
        }
        
        private System.IAsyncResult OnBeginGetListGamePlayInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand cmd = ((TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand)(inValues[0]));
            return ((TheS.Casinova.ColorsSvc.IColorsService)(this)).BeginGetListGamePlayInformation(cmd, callback, asyncState);
        }
        
        private object[] OnEndGetListGamePlayInformation(System.IAsyncResult result) {
            TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand retVal = ((TheS.Casinova.ColorsSvc.IColorsService)(this)).EndGetListGamePlayInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetListGamePlayInformationCompleted(object state) {
            if ((this.GetListGamePlayInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetListGamePlayInformationCompleted(this, new GetListGamePlayInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetListGamePlayInformationAsync(TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand cmd) {
            this.GetListGamePlayInformationAsync(cmd, null);
        }
        
        public void GetListGamePlayInformationAsync(TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand cmd, object userState) {
            if ((this.onBeginGetListGamePlayInformationDelegate == null)) {
                this.onBeginGetListGamePlayInformationDelegate = new BeginOperationDelegate(this.OnBeginGetListGamePlayInformation);
            }
            if ((this.onEndGetListGamePlayInformationDelegate == null)) {
                this.onEndGetListGamePlayInformationDelegate = new EndOperationDelegate(this.OnEndGetListGamePlayInformation);
            }
            if ((this.onGetListGamePlayInformationCompletedDelegate == null)) {
                this.onGetListGamePlayInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListGamePlayInformationCompleted);
            }
            base.InvokeAsync(this.onBeginGetListGamePlayInformationDelegate, new object[] {
                        cmd}, this.onEndGetListGamePlayInformationDelegate, this.onGetListGamePlayInformationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.ColorsSvc.IColorsService.BeginGetGameResult(TheS.Casinova.ColorsSvc.GetGameResultCommand cmd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGameResult(cmd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.ColorsSvc.GetGameResultCommand TheS.Casinova.ColorsSvc.IColorsService.EndGetGameResult(System.IAsyncResult result) {
            return base.Channel.EndGetGameResult(result);
        }
        
        private System.IAsyncResult OnBeginGetGameResult(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TheS.Casinova.ColorsSvc.GetGameResultCommand cmd = ((TheS.Casinova.ColorsSvc.GetGameResultCommand)(inValues[0]));
            return ((TheS.Casinova.ColorsSvc.IColorsService)(this)).BeginGetGameResult(cmd, callback, asyncState);
        }
        
        private object[] OnEndGetGameResult(System.IAsyncResult result) {
            TheS.Casinova.ColorsSvc.GetGameResultCommand retVal = ((TheS.Casinova.ColorsSvc.IColorsService)(this)).EndGetGameResult(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGameResultCompleted(object state) {
            if ((this.GetGameResultCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGameResultCompleted(this, new GetGameResultCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGameResultAsync(TheS.Casinova.ColorsSvc.GetGameResultCommand cmd) {
            this.GetGameResultAsync(cmd, null);
        }
        
        public void GetGameResultAsync(TheS.Casinova.ColorsSvc.GetGameResultCommand cmd, object userState) {
            if ((this.onBeginGetGameResultDelegate == null)) {
                this.onBeginGetGameResultDelegate = new BeginOperationDelegate(this.OnBeginGetGameResult);
            }
            if ((this.onEndGetGameResultDelegate == null)) {
                this.onEndGetGameResultDelegate = new EndOperationDelegate(this.OnEndGetGameResult);
            }
            if ((this.onGetGameResultCompletedDelegate == null)) {
                this.onGetGameResultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGameResultCompleted);
            }
            base.InvokeAsync(this.onBeginGetGameResultDelegate, new object[] {
                        cmd}, this.onEndGetGameResultDelegate, this.onGetGameResultCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.ColorsSvc.IColorsService.BeginGetWinnerInformation(TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand cmd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWinnerInformation(cmd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand TheS.Casinova.ColorsSvc.IColorsService.EndGetWinnerInformation(System.IAsyncResult result) {
            return base.Channel.EndGetWinnerInformation(result);
        }
        
        private System.IAsyncResult OnBeginGetWinnerInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand cmd = ((TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand)(inValues[0]));
            return ((TheS.Casinova.ColorsSvc.IColorsService)(this)).BeginGetWinnerInformation(cmd, callback, asyncState);
        }
        
        private object[] OnEndGetWinnerInformation(System.IAsyncResult result) {
            TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand retVal = ((TheS.Casinova.ColorsSvc.IColorsService)(this)).EndGetWinnerInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWinnerInformationCompleted(object state) {
            if ((this.GetWinnerInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWinnerInformationCompleted(this, new GetWinnerInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWinnerInformationAsync(TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand cmd) {
            this.GetWinnerInformationAsync(cmd, null);
        }
        
        public void GetWinnerInformationAsync(TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand cmd, object userState) {
            if ((this.onBeginGetWinnerInformationDelegate == null)) {
                this.onBeginGetWinnerInformationDelegate = new BeginOperationDelegate(this.OnBeginGetWinnerInformation);
            }
            if ((this.onEndGetWinnerInformationDelegate == null)) {
                this.onEndGetWinnerInformationDelegate = new EndOperationDelegate(this.OnEndGetWinnerInformation);
            }
            if ((this.onGetWinnerInformationCompletedDelegate == null)) {
                this.onGetWinnerInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWinnerInformationCompleted);
            }
            base.InvokeAsync(this.onBeginGetWinnerInformationDelegate, new object[] {
                        cmd}, this.onEndGetWinnerInformationDelegate, this.onGetWinnerInformationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TheS.Casinova.ColorsSvc.IColorsService.BeginBet(TheS.Casinova.ColorsSvc.BetCommand cmd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBet(cmd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TheS.Casinova.ColorsSvc.BetCommand TheS.Casinova.ColorsSvc.IColorsService.EndBet(System.IAsyncResult result) {
            return base.Channel.EndBet(result);
        }
        
        private System.IAsyncResult OnBeginBet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TheS.Casinova.ColorsSvc.BetCommand cmd = ((TheS.Casinova.ColorsSvc.BetCommand)(inValues[0]));
            return ((TheS.Casinova.ColorsSvc.IColorsService)(this)).BeginBet(cmd, callback, asyncState);
        }
        
        private object[] OnEndBet(System.IAsyncResult result) {
            TheS.Casinova.ColorsSvc.BetCommand retVal = ((TheS.Casinova.ColorsSvc.IColorsService)(this)).EndBet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBetCompleted(object state) {
            if ((this.BetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BetCompleted(this, new BetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BetAsync(TheS.Casinova.ColorsSvc.BetCommand cmd) {
            this.BetAsync(cmd, null);
        }
        
        public void BetAsync(TheS.Casinova.ColorsSvc.BetCommand cmd, object userState) {
            if ((this.onBeginBetDelegate == null)) {
                this.onBeginBetDelegate = new BeginOperationDelegate(this.OnBeginBet);
            }
            if ((this.onEndBetDelegate == null)) {
                this.onEndBetDelegate = new EndOperationDelegate(this.OnEndBet);
            }
            if ((this.onBetCompletedDelegate == null)) {
                this.onBetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBetCompleted);
            }
            base.InvokeAsync(this.onBeginBetDelegate, new object[] {
                        cmd}, this.onEndBetDelegate, this.onBetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TheS.Casinova.ColorsSvc.IColorsService CreateChannel() {
            return new ColorsServiceClientChannel(this);
        }
        
        private class ColorsServiceClientChannel : ChannelBase<TheS.Casinova.ColorsSvc.IColorsService>, TheS.Casinova.ColorsSvc.IColorsService {
            
            public ColorsServiceClientChannel(System.ServiceModel.ClientBase<TheS.Casinova.ColorsSvc.IColorsService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetListActiveGameRound(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetListActiveGameRound", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.ColorsSvc.ListActiveGameRoundCommand EndGetListActiveGameRound(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.ColorsSvc.ListActiveGameRoundCommand _result = ((TheS.Casinova.ColorsSvc.ListActiveGameRoundCommand)(base.EndInvoke("GetListActiveGameRound", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetListGamePlayInformation(TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand cmd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cmd;
                System.IAsyncResult _result = base.BeginInvoke("GetListGamePlayInformation", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand EndGetListGamePlayInformation(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand _result = ((TheS.Casinova.ColorsSvc.ListGamePlayInfoCommand)(base.EndInvoke("GetListGamePlayInformation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGameResult(TheS.Casinova.ColorsSvc.GetGameResultCommand cmd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cmd;
                System.IAsyncResult _result = base.BeginInvoke("GetGameResult", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.ColorsSvc.GetGameResultCommand EndGetGameResult(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.ColorsSvc.GetGameResultCommand _result = ((TheS.Casinova.ColorsSvc.GetGameResultCommand)(base.EndInvoke("GetGameResult", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWinnerInformation(TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand cmd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cmd;
                System.IAsyncResult _result = base.BeginInvoke("GetWinnerInformation", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand EndGetWinnerInformation(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand _result = ((TheS.Casinova.ColorsSvc.PayForColorsWinnerInfoCommand)(base.EndInvoke("GetWinnerInformation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBet(TheS.Casinova.ColorsSvc.BetCommand cmd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cmd;
                System.IAsyncResult _result = base.BeginInvoke("Bet", _args, callback, asyncState);
                return _result;
            }
            
            public TheS.Casinova.ColorsSvc.BetCommand EndBet(System.IAsyncResult result) {
                object[] _args = new object[0];
                TheS.Casinova.ColorsSvc.BetCommand _result = ((TheS.Casinova.ColorsSvc.BetCommand)(base.EndInvoke("Bet", _args, result)));
                return _result;
            }
        }
    }
}
