// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.MagicNine.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class N2NGetListGamePlayAutoBetInformationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetGamePlayAutoBetInformation.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "N2N Get list game play auto bet information", @"1.Game has display list active game rounds finish (Silverlight)
2.Send request get list game play information indentify by username to web server (Silverlight)
3.List game play information where owner name and username is match (Web Server)
4.Send game play information back to client (Web Server)
5.Display game play information (Silverlight)", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line 9
testRunner.Given("Create and initialize GamePlayViewModel and MagicNine game service");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "WinnerPoint"});
            table1.AddRow(new string[] {
                        "1",
                        "9"});
            table1.AddRow(new string[] {
                        "2",
                        "99"});
            table1.AddRow(new string[] {
                        "3",
                        "999"});
            table1.AddRow(new string[] {
                        "4",
                        "9999"});
#line 10
testRunner.And("Back service have active game rounds are:", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "RoundID",
                        "Amount",
                        "Interval",
                        "StratTrackingID"});
            table2.AddRow(new string[] {
                        "Sakul",
                        "1",
                        "30",
                        "60",
                        "{200BEB34-FD59-4F8E-A258-C654BD5105D9}"});
            table2.AddRow(new string[] {
                        "Sakul",
                        "2",
                        "560",
                        "1",
                        "{15BEFAE8-C361-4A5F-8048-3E6381BEA71E}"});
            table2.AddRow(new string[] {
                        "Sakul",
                        "4",
                        "10245",
                        "3600",
                        "{337466C7-652B-4F8B-92B0-571BE53D460E}"});
#line 16
testRunner.And("Web server have game play auto bet information are", ((string)(null)), table2);
#line 21
testRunner.When("Send request GetListActiveGameRounds() to web server");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Request auto bet informations, get auto bet informations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play auto bet information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void RequestAutoBetInformationsGetAutoBetInformations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request auto bet informations, get auto bet informations", new string[] {
                        "record_mock"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
testRunner.When("Send request GetListGamePlayAutoBet( \'Sakul\' )");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "WinnerPoint",
                        "Amount",
                        "Interval",
                        "StratTrackingID"});
            table3.AddRow(new string[] {
                        "1",
                        "9",
                        "30",
                        "60",
                        "{200BEB34-FD59-4F8E-A258-C654BD5105D9}"});
            table3.AddRow(new string[] {
                        "2",
                        "99",
                        "560",
                        "1",
                        "{15BEFAE8-C361-4A5F-8048-3E6381BEA71E}"});
            table3.AddRow(new string[] {
                        "3",
                        "999",
                        "0",
                        "0",
                        "{00000000-0000-0000-0000-000000000000}"});
            table3.AddRow(new string[] {
                        "4",
                        "9999",
                        "10245",
                        "3600",
                        "{337466C7-652B-4F8B-92B0-571BE53D460E}"});
#line 26
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table3);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Request auo bet but web server not fount username")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play auto bet information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void RequestAuoBetButWebServerNotFountUsername()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request auo bet but web server not fount username", new string[] {
                        "record_mock"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
testRunner.When("Send request GetListGamePlayAutoBet( \'Mary\' )");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "WinnerPoint",
                        "Amount",
                        "Interval",
                        "StratTrackingID"});
            table4.AddRow(new string[] {
                        "1",
                        "9",
                        "0",
                        "0",
                        "{00000000-0000-0000-0000-000000000000}"});
            table4.AddRow(new string[] {
                        "2",
                        "99",
                        "0",
                        "0",
                        "{00000000-0000-0000-0000-000000000000}"});
            table4.AddRow(new string[] {
                        "3",
                        "999",
                        "0",
                        "0",
                        "{00000000-0000-0000-0000-000000000000}"});
            table4.AddRow(new string[] {
                        "4",
                        "9999",
                        "0",
                        "0",
                        "{00000000-0000-0000-0000-000000000000}"});
#line 36
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Request auto bet informations, get auto bet informations more than 1 request")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play auto bet information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void RequestAutoBetInformationsGetAutoBetInformationsMoreThan1Request()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request auto bet informations, get auto bet informations more than 1 request", new string[] {
                        "record_mock"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
testRunner.When("Send request GetListGamePlayAutoBet( \'Sakul\' )");
#line 46
testRunner.And("Send request GetListGamePlayAutoBet( \'Sakul\' )");
#line 47
testRunner.And("Send request GetListGamePlayAutoBet( \'Sakul\' )");
#line 48
testRunner.And("Send request GetListGamePlayAutoBet( \'Sakul\' )");
#line 49
testRunner.And("Send request GetListGamePlayAutoBet( \'Sakul\' )");
#line 50
testRunner.And("Send request GetListGamePlayAutoBet( \'Sakul\' )");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "WinnerPoint",
                        "Amount",
                        "Interval",
                        "StratTrackingID"});
            table5.AddRow(new string[] {
                        "1",
                        "9",
                        "30",
                        "60",
                        "{200BEB34-FD59-4F8E-A258-C654BD5105D9}"});
            table5.AddRow(new string[] {
                        "2",
                        "99",
                        "560",
                        "1",
                        "{15BEFAE8-C361-4A5F-8048-3E6381BEA71E}"});
            table5.AddRow(new string[] {
                        "3",
                        "999",
                        "0",
                        "0",
                        "{00000000-0000-0000-0000-000000000000}"});
            table5.AddRow(new string[] {
                        "4",
                        "9999",
                        "10245",
                        "3600",
                        "{337466C7-652B-4F8B-92B0-571BE53D460E}"});
#line 51
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table5);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
