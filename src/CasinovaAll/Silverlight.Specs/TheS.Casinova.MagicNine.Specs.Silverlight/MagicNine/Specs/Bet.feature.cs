// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.MagicNine.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class N2NBetFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Bet.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "N2N Bet", @"1.Player have click Bet button (Silverlight)
2.Save pay log (Silverlight)
3.Sent Bet to Web server (Silverlight)
4.Web server generate trackingID and sent it back to client (Web Server)
5.Sent trackingID to observer follow trackingID in Lot (Silverlight)
6.Observer found trackingID in lot remove pay log (Silverlight)
7.Request get list bet log from web server (Silverlight)
8.List bet log and sent it back to client (Web Server)
9.Display bet log information (Silverlight)", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 12
#line 13
testRunner.Given("Create and initialize GamePlayViewModel and MagicNine game service");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "WinnerPoint"});
            table1.AddRow(new string[] {
                        "1",
                        "9"});
            table1.AddRow(new string[] {
                        "2",
                        "99"});
            table1.AddRow(new string[] {
                        "3",
                        "999"});
            table1.AddRow(new string[] {
                        "4",
                        "9999"});
#line 14
testRunner.And("Back service have active game rounds are:", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "UserName",
                        "BetOrder",
                        "BetDateTime"});
            table2.AddRow(new string[] {
                        "1",
                        "Sakul",
                        "72",
                        "2010-11-17 09:00:00"});
            table2.AddRow(new string[] {
                        "1",
                        "Sakul",
                        "11",
                        "2010-11-17 09:00:30"});
            table2.AddRow(new string[] {
                        "2",
                        "Sakul",
                        "91",
                        "2010-11-17 09:00:59"});
            table2.AddRow(new string[] {
                        "3",
                        "Sakul",
                        "0",
                        "2010-11-17 09:01:00"});
            table2.AddRow(new string[] {
                        "1",
                        "Miolynet",
                        "12",
                        "2010-11-17 10:11:00"});
            table2.AddRow(new string[] {
                        "1",
                        "Miolynet",
                        "13",
                        "2010-11-18 07:23:50"});
#line 20
testRunner.And("Web server have list bet log are", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "TrackingID"});
            table3.AddRow(new string[] {
                        "{60AD85F6-3978-48AA-9286-E5A7344B77EC}"});
            table3.AddRow(new string[] {
                        "{A82FA8E6-1BCC-443E-A61A-F81B8B4DED83}"});
            table3.AddRow(new string[] {
                        "{CF24E43D-49FA-482B-9AD2-DCF0159F0C41}"});
            table3.AddRow(new string[] {
                        "{2C8EE9D1-A106-4216-AA57-E44554F822A8}"});
            table3.AddRow(new string[] {
                        "{89D5613E-8007-4AAA-8A4D-AF16014B2D5F}"});
            table3.AddRow(new string[] {
                        "{50EA817A-512E-469E-982F-8377F0EF84A6}"});
#line 28
testRunner.And("Setup web service trackingID for Bet are", ((string)(null)), table3);
#line 36
testRunner.When("Send request GetListActiveGameRounds() to web server");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Bet normal case round 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Bet")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void BetNormalCaseRound1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bet normal case round 1", new string[] {
                        "record_mock"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
testRunner.When("I press bet in game round=1");
#line 41
testRunner.Then("PayLog has save RoundID=\'1\', Count=\'1\'");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "TrackingID"});
            table4.AddRow(new string[] {
                        "{60AD85F6-3978-48AA-9286-E5A7344B77EC}"});
#line 42
testRunner.And("Lot of TrackingIDs has Retrieved are", ((string)(null)), table4);
#line 45
testRunner.And("PayLog has empty");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Bet normal case round 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Bet")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void BetNormalCaseRound2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bet normal case round 2", new string[] {
                        "record_mock"});
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
testRunner.When("I press bet in game round=2");
#line 50
testRunner.Then("PayLog has save RoundID=\'2\', Count=\'1\'");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "TrackingID"});
            table5.AddRow(new string[] {
                        "{60AD85F6-3978-48AA-9286-E5A7344B77EC}"});
#line 51
testRunner.And("Lot of TrackingIDs has Retrieved are", ((string)(null)), table5);
#line 54
testRunner.And("PayLog has empty");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Bet normal case round 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Bet")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void BetNormalCaseRound3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bet normal case round 3", new string[] {
                        "record_mock"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
testRunner.When("I press bet in game round=3");
#line 59
testRunner.Then("PayLog has save RoundID=\'3\', Count=\'1\'");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "TrackingID"});
            table6.AddRow(new string[] {
                        "{60AD85F6-3978-48AA-9286-E5A7344B77EC}"});
#line 60
testRunner.And("Lot of TrackingIDs has Retrieved are", ((string)(null)), table6);
#line 63
testRunner.And("PayLog has empty");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Bet more than 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Bet")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void BetMoreThan1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bet more than 1", new string[] {
                        "record_mock"});
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
testRunner.When("I press bet in game round=4");
#line 68
testRunner.And("I press bet in game round=4");
#line 69
testRunner.And("I press bet in game round=4");
#line 70
testRunner.And("I press bet in game round=4");
#line 71
testRunner.Then("PayLog has save RoundID=\'4\', Count=\'4\'");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "TrackingID"});
            table7.AddRow(new string[] {
                        "{60AD85F6-3978-48AA-9286-E5A7344B77EC}"});
            table7.AddRow(new string[] {
                        "{A82FA8E6-1BCC-443E-A61A-F81B8B4DED83}"});
            table7.AddRow(new string[] {
                        "{CF24E43D-49FA-482B-9AD2-DCF0159F0C41}"});
            table7.AddRow(new string[] {
                        "{2C8EE9D1-A106-4216-AA57-E44554F822A8}"});
#line 72
testRunner.And("Lot of TrackingIDs has Retrieved are", ((string)(null)), table7);
#line 78
testRunner.And("PayLog has empty");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Bet more than 1 difference roundID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Bet")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void BetMoreThan1DifferenceRoundID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bet more than 1 difference roundID", new string[] {
                        "record_mock"});
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
testRunner.When("I press bet in game round=1");
#line 83
testRunner.And("I press bet in game round=3");
#line 84
testRunner.And("I press bet in game round=2");
#line 85
testRunner.And("I press bet in game round=4");
#line 86
testRunner.And("I press bet in game round=4");
#line 87
testRunner.Then("PayLog has save RoundID=\'1\', Count=\'1\'");
#line 88
testRunner.And("PayLog has save RoundID=\'2\', Count=\'1\'");
#line 89
testRunner.And("PayLog has save RoundID=\'3\', Count=\'1\'");
#line 90
testRunner.And("PayLog has save RoundID=\'4\', Count=\'2\'");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "TrackingID"});
            table8.AddRow(new string[] {
                        "{60AD85F6-3978-48AA-9286-E5A7344B77EC}"});
            table8.AddRow(new string[] {
                        "{A82FA8E6-1BCC-443E-A61A-F81B8B4DED83}"});
            table8.AddRow(new string[] {
                        "{CF24E43D-49FA-482B-9AD2-DCF0159F0C41}"});
            table8.AddRow(new string[] {
                        "{2C8EE9D1-A106-4216-AA57-E44554F822A8}"});
            table8.AddRow(new string[] {
                        "{89D5613E-8007-4AAA-8A4D-AF16014B2D5F}"});
#line 91
testRunner.And("Lot of TrackingIDs has Retrieved are", ((string)(null)), table8);
#line 98
testRunner.And("PayLog has empty");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Bet but lot don\'t retrieved trackingID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Bet")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void BetButLotDonTRetrievedTrackingID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bet but lot don\'t retrieved trackingID", new string[] {
                        "record_mock"});
#line 101
this.ScenarioSetup(scenarioInfo);
#line 102
testRunner.When("I press bet in game round=3");
#line 103
testRunner.Then("PayLog has save RoundID=\'3\', Count=\'1\'");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "TrackingID"});
            table9.AddRow(new string[] {
                        "{A82FA8E6-1BCC-443E-A61A-F81B8B4DED83}"});
            table9.AddRow(new string[] {
                        "{CF24E43D-49FA-482B-9AD2-DCF0159F0C41}"});
            table9.AddRow(new string[] {
                        "{2C8EE9D1-A106-4216-AA57-E44554F822A8}"});
            table9.AddRow(new string[] {
                        "{89D5613E-8007-4AAA-8A4D-AF16014B2D5F}"});
#line 104
testRunner.And("Lot of TrackingIDs has Retrieved are", ((string)(null)), table9);
#line 110
testRunner.Then("PayLog has save RoundID=\'3\', Count=\'1\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Bet more than 1 difference roundID and lot don\'t retrieved trackingID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Bet")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void BetMoreThan1DifferenceRoundIDAndLotDonTRetrievedTrackingID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bet more than 1 difference roundID and lot don\'t retrieved trackingID", new string[] {
                        "record_mock"});
#line 113
this.ScenarioSetup(scenarioInfo);
#line 114
testRunner.When("I press bet in game round=1");
#line 115
testRunner.And("I press bet in game round=3");
#line 116
testRunner.And("I press bet in game round=2");
#line 117
testRunner.And("I press bet in game round=4");
#line 118
testRunner.And("I press bet in game round=4");
#line 119
testRunner.Then("PayLog has save RoundID=\'1\', Count=\'1\'");
#line 120
testRunner.And("PayLog has save RoundID=\'2\', Count=\'1\'");
#line 121
testRunner.And("PayLog has save RoundID=\'3\', Count=\'1\'");
#line 122
testRunner.And("PayLog has save RoundID=\'4\', Count=\'2\'");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "TrackingID"});
            table10.AddRow(new string[] {
                        "{60AD85F6-3978-48AA-9286-E5A7344B77EC}"});
            table10.AddRow(new string[] {
                        "{CF24E43D-49FA-482B-9AD2-DCF0159F0C41}"});
#line 123
testRunner.And("Lot of TrackingIDs has Retrieved are", ((string)(null)), table10);
#line 127
testRunner.And("PayLog has save RoundID=\'1\', Count=\'0\'");
#line 128
testRunner.And("PayLog has save RoundID=\'2\', Count=\'0\'");
#line 129
testRunner.And("PayLog has save RoundID=\'3\', Count=\'1\'");
#line 130
testRunner.And("PayLog has save RoundID=\'4\', Count=\'2\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
