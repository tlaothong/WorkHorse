// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.Colors.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class N2NGetListGamePlayInformationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetListGamePlayInformation.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "N2N Get list game play information", @"1.Game has display list active game rounds finish (Silverlight)
2.Send request get list game play information indentify by username to web server (Silverlight)
3.List game play information where owner name and username is match (Web Server)
4.Send game play information back to client (Web Server)
5.Display game play information (Silverlight)
6.Looking TrackingID and OnGoingTrackingID (Silverlight)
6.1 OnGoingTrackingID and TrackingID not match (Silverlight)
6.1.1 Display waiting icon (Silverlight)
6.1.2 Request get list game play information until TrackingID and OnGoingTrackingID is match (Silverlight)
6.2 OnGoingTrackingID and TrackingID match (Silverlight)
6.2.1 Remove waiting icon (Silverlight)", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 14
#line 15
testRunner.Given("Create and initialize GamePlayViewModel and Colors game service");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "TableID",
                        "RoundID",
                        "TrackingID",
                        "OnGoingTrackingID",
                        "TotalBetAmountOfBlack",
                        "TotalBetAmountOfWhite"});
            table1.AddRow(new string[] {
                        "Sakul",
                        "1",
                        "12",
                        "{EADA0D2A-0F50-4BDA-8CB5-0E937D163A84}",
                        "{EADA0D2A-0F50-4BDA-8CB5-0E937D163A84}",
                        "100",
                        "20"});
            table1.AddRow(new string[] {
                        "Miolynet",
                        "4",
                        "15",
                        "{91FFE007-9030-4F94-84DF-05729B120019}",
                        "{5107D995-51BD-494C-87C1-44E29D701DE3}",
                        "0",
                        "71"});
            table1.AddRow(new string[] {
                        "Sakul",
                        "1",
                        "12",
                        "{EADA0D2A-0F50-4BDA-8CB5-0E937D163A84}",
                        "{EADA0D2A-0F50-4BDA-8CB5-0E937D163A84}",
                        "150",
                        "20"});
            table1.AddRow(new string[] {
                        "Miolynet",
                        "4",
                        "15",
                        "{91FFE007-9030-4F94-84DF-05729B120019}",
                        "{5107D995-51BD-494C-87C1-44E29D701DE3}",
                        "9",
                        "71"});
            table1.AddRow(new string[] {
                        "Miolynet",
                        "5",
                        "16",
                        "{3A1C868C-867C-4FD3-82E2-A9CBDF7EC828}",
                        "{3A1C868C-867C-4FD3-82E2-A9CBDF7EC828}",
                        "1024",
                        "768"});
            table1.AddRow(new string[] {
                        "Miolynet",
                        "4",
                        "15",
                        "{91FFE007-9030-4F94-84DF-05729B120019}",
                        "{5107D995-51BD-494C-87C1-44E29D701DE3}",
                        "9",
                        "71"});
#line 16
testRunner.And("Web server have game play information are", ((string)(null)), table1);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Send request get list game play information to web server\r\nweb server have any ga" +
            "me play information is owner name and username match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void SendRequestGetListGamePlayInformationToWebServer_WebServerHaveAnyGamePlayInformationIsOwnerNameAndUsernameMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send request get list game play information to web server\r\nweb server have any ga" +
                    "me play information is owner name and username match", new string[] {
                        "record_mock"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 28
testRunner.When("Send request GetListGamePlayInformation( \'Sakul\' )");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Round",
                        "Amount",
                        "TotalBetBlack",
                        "TotalBetWhite"});
            table2.AddRow(new string[] {
                        "12",
                        "290",
                        "250",
                        "40"});
#line 29
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Send request get list game play information to web server\r\nweb server don\'t have " +
            "any game play information is owner name and username match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void SendRequestGetListGamePlayInformationToWebServer_WebServerDonTHaveAnyGamePlayInformationIsOwnerNameAndUsernameMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send request get list game play information to web server\r\nweb server don\'t have " +
                    "any game play information is owner name and username match", new string[] {
                        "record_mock"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 36
testRunner.When("Send request GetListGamePlayInformation( \'Mary\' )");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Round",
                        "Amount",
                        "TotalBetBlack",
                        "TotalBetWhite"});
#line 37
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table3);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Send request get list game play information to web server\r\nTrackingID and OnGoing" +
            "TrackingID is not match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void SendRequestGetListGamePlayInformationToWebServer_TrackingIDAndOnGoingTrackingIDIsNotMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send request get list game play information to web server\r\nTrackingID and OnGoing" +
                    "TrackingID is not match", new string[] {
                        "record_mock"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 43
testRunner.When("Send request GetListGamePlayInformation( \'Miolynet\' )");
#line 44
testRunner.And("TrackingID and OnGoingTrackingID not match repeat request GetListGamePlayInformat" +
                    "ion until TrackingID and OnGoingTrackingID is match");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Round",
                        "Amount",
                        "TotalBetBlack",
                        "TotalBetWhite"});
            table4.AddRow(new string[] {
                        "15",
                        "231",
                        "18",
                        "213"});
            table4.AddRow(new string[] {
                        "16",
                        "1792",
                        "1024",
                        "768"});
#line 45
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Send request get list game play information to web server\r\nTrackingID and OnGoing" +
            "TrackingID is match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void SendRequestGetListGamePlayInformationToWebServer_TrackingIDAndOnGoingTrackingIDIsMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send request get list game play information to web server\r\nTrackingID and OnGoing" +
                    "TrackingID is match", new string[] {
                        "record_mock"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 53
testRunner.When("Send request GetListGamePlayInformation( \'Sakul\' )");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Round",
                        "Amount",
                        "TotalBetBlack",
                        "TotalBetWhite"});
            table5.AddRow(new string[] {
                        "12",
                        "290",
                        "250",
                        "40"});
#line 54
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table5);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Send request get list game play information  but username is null to web server, " +
            "Incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void SendRequestGetListGamePlayInformationButUsernameIsNullToWebServerIncorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send request get list game play information  but username is null to web server, " +
                    "Incorrect", new string[] {
                        "record_mock"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
testRunner.When("Send request GetListGamePlayInformation( \'null\' )");
#line 61
testRunner.Then("Display error message");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Send request get list game play information  but username is empty to web server," +
            " Incorrect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void SendRequestGetListGamePlayInformationButUsernameIsEmptyToWebServerIncorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send request get list game play information  but username is empty to web server," +
                    " Incorrect", new string[] {
                        "record_mock"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line 65
testRunner.When("Send request GetListGamePlayInformation( \'\' )");
#line 66
testRunner.Then("Display error message");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
