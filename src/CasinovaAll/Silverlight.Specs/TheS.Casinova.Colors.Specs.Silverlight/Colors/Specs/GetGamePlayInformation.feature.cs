// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.Colors.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class N2NGetListGamePlayInformationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetGamePlayInformation.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "N2N Get list game play information", @"1.Game has display list active game rounds finish (Silverlight)
2.Send request get list game play information indentify by username to web server (Silverlight)
3.List game play information where owner name and username is match (Web Server)
4.Send game play information back to client (Web Server)
5.Display game play information (Silverlight)
6.Looking TrackingID and OnGoingTrackingID (Silverlight)
6.1 OnGoingTrackingID and TrackingID not match (Silverlight)
6.1.1 Display waiting icon (Silverlight)
6.1.2 Request get list game play information until TrackingID and OnGoingTrackingID is match (Silverlight)
6.2 OnGoingTrackingID and TrackingID match (Silverlight)
6.2.1 Remove waiting icon (Silverlight)", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 14
#line 15
testRunner.Given("Create and initialize GamePlayViewModel and Colors game service");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "TableID",
                        "RoundID",
                        "TrackingID",
                        "OnGoingTrackingID",
                        "TotalBetAmountOfBlack",
                        "TotalBetAmountOfWhite",
                        "Winner"});
            table1.AddRow(new string[] {
                        "Sakul",
                        "1",
                        "13",
                        "{58D6267D-AAEC-4CAD-B1EF-DB861C9D5603}",
                        "{58D6267D-AAEC-4CAD-B1EF-DB861C9D5603}",
                        "150",
                        "20",
                        "Black"});
            table1.AddRow(new string[] {
                        "Miolynet",
                        "2",
                        "14",
                        "{91FFE007-9030-4F94-84DF-05729B120019}",
                        "{63089E73-26AD-4034-A07F-97B6F9DD89A5}",
                        "0",
                        "71",
                        "Black"});
            table1.AddRow(new string[] {
                        "Miolynet",
                        "2",
                        "14",
                        "{91FFE007-9030-4F94-84DF-05729B120019}",
                        "{FCA0EA8F-1C7B-4EF1-A9B9-7357E4C25FCC}",
                        "9",
                        "71",
                        "White"});
            table1.AddRow(new string[] {
                        "Miolynet",
                        "2",
                        "14",
                        "{91FFE007-9030-4F94-84DF-05729B120019}",
                        "{5107D995-51BD-494C-87C1-44E29D701DE3}",
                        "9",
                        "71",
                        "Black"});
            table1.AddRow(new string[] {
                        "Miolynet",
                        "2",
                        "14",
                        "{91FFE007-9030-4F94-84DF-05729B120019}",
                        "{6B6017D0-A709-4AA3-81AD-20FD483C2D79}",
                        "20",
                        "71",
                        "Black"});
            table1.AddRow(new string[] {
                        "Miolynet",
                        "2",
                        "14",
                        "{6B6017D0-A709-4AA3-81AD-20FD483C2D79}",
                        "{6B6017D0-A709-4AA3-81AD-20FD483C2D79}",
                        "220",
                        "80",
                        "White"});
            table1.AddRow(new string[] {
                        "Zazzy",
                        "3",
                        "15",
                        "{EC3DACCA-3474-4FCA-B1F6-112E043A5C44}",
                        "{EC3DACCA-3474-4FCA-B1F6-112E043A5C44}",
                        "72",
                        "565",
                        "White"});
            table1.AddRow(new string[] {
                        "Zazzy",
                        "3",
                        "16",
                        "{EB4A0CEB-9766-4E33-B932-D16246039808}",
                        "{EB4A0CEB-9766-4E33-B932-D16246039808}",
                        "55",
                        "21",
                        "Black"});
            table1.AddRow(new string[] {
                        "Zazzy",
                        "5",
                        "17",
                        "{3424E571-F05F-47AF-ACCA-0EF095A9A883}",
                        "{3424E571-F05F-47AF-ACCA-0EF095A9A883}",
                        "43",
                        "44",
                        "Black"});
#line 16
testRunner.And("Web server have game play information are", ((string)(null)), table1);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Web server have game play information match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void WebServerHaveGamePlayInformationMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Web server have game play information match", new string[] {
                        "record_mock"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
testRunner.When("Send request GetListGamePlayInformation username=Sakul");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Round",
                        "Amount",
                        "TotalBetBlack",
                        "TotalBetWhite",
                        "Winner"});
            table2.AddRow(new string[] {
                        "13",
                        "170",
                        "150",
                        "20",
                        "Black"});
#line 31
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Web server don\'t have game play information match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void WebServerDonTHaveGamePlayInformationMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Web server don\'t have game play information match", new string[] {
                        "record_mock"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
testRunner.When("Send request GetListGamePlayInformation username=Mary");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Round",
                        "Amount",
                        "TotalBetBlack",
                        "TotalBetWhite",
                        "Winner"});
#line 38
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table3);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Web server have multi game play information match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void WebServerHaveMultiGamePlayInformationMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Web server have multi game play information match", new string[] {
                        "record_mock"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
testRunner.When("Send request GetListGamePlayInformation username=Zazzy");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Round",
                        "Amount",
                        "TotalBetBlack",
                        "TotalBetWhite",
                        "Winner"});
            table4.AddRow(new string[] {
                        "15",
                        "637",
                        "72",
                        "565",
                        "White"});
            table4.AddRow(new string[] {
                        "16",
                        "76",
                        "55",
                        "21",
                        "Black"});
            table4.AddRow(new string[] {
                        "17",
                        "87",
                        "43",
                        "44",
                        "Black"});
#line 44
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Send request get TrackingID and OnGoingTrackingID not match")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get list game play information")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void SendRequestGetTrackingIDAndOnGoingTrackingIDNotMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send request get TrackingID and OnGoingTrackingID not match", new string[] {
                        "record_mock"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
testRunner.When("Send request GetListGamePlayInformation username=Miolynet");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Round",
                        "Amount",
                        "TotalBetBlack",
                        "TotalBetWhite",
                        "Winner"});
            table5.AddRow(new string[] {
                        "14",
                        "300",
                        "220",
                        "80",
                        "White"});
#line 53
testRunner.Then("Tables in GamePlayViewModel display game play information are", ((string)(null)), table5);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
