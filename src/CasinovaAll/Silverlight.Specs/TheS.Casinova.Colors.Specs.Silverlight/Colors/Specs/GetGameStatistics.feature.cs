// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.Colors.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class N2NGetGameStatisticsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetGameStatistics.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "N2N Get game statistics", @"1.Game timeout (Silverlight)
2.Send request get game result identify game round by roundID to web server (Silverlight)
3.Send POT TotalAmountOfBlack and TotablAmountOfWhite back to client (Web Server)
4.Compare POT between TotalAmountOfBlack and TotalAmountOfWhite for color winner (Silverlight)
5.Display winner, TotalAmountOfBlack and TotalAmountOfWhite (Silverlight)
6.If player have bet in winner pot game has display congratulation and pay award (Silverlight)", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line 10
testRunner.Given("Create and initialize GamePlayViewModel and Colors game service");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "BlackPot",
                        "WhitePot",
                        "HandCount"});
            table1.AddRow(new string[] {
                        "1",
                        "1523",
                        "4526",
                        "452"});
            table1.AddRow(new string[] {
                        "2",
                        "445",
                        "12399",
                        "1155"});
            table1.AddRow(new string[] {
                        "3",
                        "75663",
                        "45266",
                        "5632"});
            table1.AddRow(new string[] {
                        "4",
                        "500",
                        "500",
                        "100"});
#line 11
testRunner.And("Web server have game results are", ((string)(null)), table1);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Request game result to web server, server have roundID match (roundID = 1)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get game statistics")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void RequestGameResultToWebServerServerHaveRoundIDMatchRoundID1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request game result to web server, server have roundID match (roundID = 1)", new string[] {
                        "record_mock"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
testRunner.When("Request GetGameResult( roundID = \'1\' )");
#line 21
testRunner.Then("Game has display game result Winner=\'Black\', BlackPot=\'1523\', WhitePot=\'4526\', Ha" +
                    "nds=\'452\', roundID = 1");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Request game result to web server, server have roundID match (roundID = 2)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get game statistics")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void RequestGameResultToWebServerServerHaveRoundIDMatchRoundID2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request game result to web server, server have roundID match (roundID = 2)", new string[] {
                        "record_mock"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
testRunner.When("Request GetGameResult( roundID = \'2\' )");
#line 26
testRunner.Then("Game has display game result Winner=\'Black\', BlackPot=\'445\', WhitePot=\'12399\', Ha" +
                    "nds=\'1155\', roundID = 2");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Request game result to web server, server have roundID match (roundID = 3)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get game statistics")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void RequestGameResultToWebServerServerHaveRoundIDMatchRoundID3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request game result to web server, server have roundID match (roundID = 3)", new string[] {
                        "record_mock"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
testRunner.When("Request GetGameResult( roundID = \'3\' )");
#line 31
testRunner.Then("Game has display game result Winner=\'White\', BlackPot=\'75663\', WhitePot=\'45266\', " +
                    "Hands=\'5632\', roundID = 3");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Black pot and White pot are equal, White win")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get game statistics")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void BlackPotAndWhitePotAreEqualWhiteWin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Black pot and White pot are equal, White win", new string[] {
                        "record_mock"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
testRunner.When("Request GetGameResult( roundID = \'4\' )");
#line 36
testRunner.Then("Game has display game result Winner=\'White\', BlackPot=\'500\', WhitePot=\'500\', Hand" +
                    "s=\'100\', roundID = 4");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Request game result to web server, server don\'t have roundID match (roundID = 99)" +
            ", roundID = 99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get game statistics")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void RequestGameResultToWebServerServerDonTHaveRoundIDMatchRoundID99RoundID99()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request game result to web server, server don\'t have roundID match (roundID = 99)" +
                    ", roundID = 99", new string[] {
                        "record_mock"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
testRunner.When("Request GetGameResult( roundID = \'99\' )");
#line 41
testRunner.Then("Game result is null");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Request game result to web server, server don\'t have roundID match (roundID = -1)" +
            ", roundID = -1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "N2N Get game statistics")]
        [Microsoft.Silverlight.Testing.TagAttribute("record_mock")]
        public virtual void RequestGameResultToWebServerServerDonTHaveRoundIDMatchRoundID_1RoundID_1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request game result to web server, server don\'t have roundID match (roundID = -1)" +
                    ", roundID = -1", new string[] {
                        "record_mock"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
testRunner.When("Request GetGameResult( roundID = \'-1\' )");
#line 46
testRunner.Then("Game result is null");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
