// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.Colors.WebExecutors.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GetGameResultFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetGameResultFeature.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetGameResult", "In order to get game result\r\nAs a system\r\nI want to get game result when game fin" +
                    "ish", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Round",
                        "StartTime",
                        "EndTime",
                        "BlackPot",
                        "WhitePot",
                        "HandCount"});
            table1.AddRow(new string[] {
                        "1",
                        "09:00",
                        "09:30",
                        "23",
                        "24",
                        "13"});
            table1.AddRow(new string[] {
                        "2",
                        "09:30",
                        "10:00",
                        "500",
                        "499",
                        "52"});
            table1.AddRow(new string[] {
                        "3",
                        "10:00",
                        "10:30",
                        "1500",
                        "1459",
                        "82"});
            table1.AddRow(new string[] {
                        "4",
                        "10:30",
                        "11:00",
                        "2001",
                        "2009",
                        "87"});
            table1.AddRow(new string[] {
                        "5",
                        "11:00",
                        "11:30",
                        "0",
                        "0",
                        "0"});
#line 7
testRunner.Given("Server has game result information", ((string)(null)), table1);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ระบบได้รับข้อมูล Round ที่เพิ่งจบเกม ระบบสามารถดึงข้อมูล GameResult ได้")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetGameResult")]
        public virtual void ระบบไดรบขอมลRoundIDทเพงจบเกมระบบสามารถดงขอมลGameResultได()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ระบบได้รับข้อมูล Round ที่เพิ่งจบเกม ระบบสามารถดึงข้อมูล GameResult ได้", new string[] {
                        "record_mock"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
testRunner.Given("The GetGameResultExecutor has been created and initialized");
#line 18
testRunner.And("Sent roundID\'4\' for get game result");
#line 19
testRunner.When("Call GetGameResultExecutor()");
#line 20
testRunner.Then("the game result should be : Round \'4\' StartTime \'10:30\' EndTime \'11:00\' BlackPo" +
                    "t \'2001\' WhitePot \'2009\' HandCount \'87\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ระบบได้รับข้อมูล Round อื่น ๆ ที่จบเกมแล้วและมีข้อมูลอยู่ใน Database ระบบสามารถ" +
            "ดึงข้อมูล GameResult ได้")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetGameResult")]
        public virtual void ระบบไดรบขอมลRoundIDอนๆทจบเกมแลวและมขอมลอยในDatabaseระบบสามารถดงขอมลGameResultได()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ระบบได้รับข้อมูล Round อื่น ๆ ที่จบเกมแล้วและมีข้อมูลอยู่ใน Database ระบบสามารถ" +
                    "ดึงข้อมูล GameResult ได้", new string[] {
                        "record_mock"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
testRunner.Given("The GetGameResultExecutor has been created and initialized");
#line 25
testRunner.And("Sent roundID\'2\' for get game result");
#line 26
testRunner.When("Call GetGameResultExecutor()");
#line 27
testRunner.Then("the game result should be : Round \'2\' StartTime \'09:30\' EndTime \'10:00\' BlackPo" +
                    "t \'500\' WhitePot \'499\' HandCount \'52\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ระบบได้รับข้อมูล Round อื่น ๆ ที่ยังไม่มีข้อมูลอยู่ใน Database ได้ข้อมูล GameRe" +
            "sult เป็น null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetGameResult")]
        public virtual void ระบบไดรบขอมลRoundIDอนๆทยงไมมขอมลอยในDatabaseไดขอมลGameResultเปนNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ระบบได้รับข้อมูล Round อื่น ๆ ที่ยังไม่มีข้อมูลอยู่ใน Database ได้ข้อมูล GameRe" +
                    "sult เป็น null", new string[] {
                        "record_mock"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
testRunner.Given("The GetGameResultExecutor has been created and initialized");
#line 32
testRunner.And("Sent roundID\'10\' for get game result");
#line 33
testRunner.When("Call GetGameResultExecutor()");
#line 34
testRunner.Then("the game result should be null");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ระบบได้รับข้อมูล Round ที่ไม่ถูกต้อง ระบบไม่สามารถดึงข้อมูล GameResult ได้")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetGameResult")]
        public virtual void ระบบไดรบขอมลRoundIDทไมถกตองระบบไมสามารถดงขอมลGameResultได()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ระบบได้รับข้อมูล Round ที่ไม่ถูกต้อง ระบบไม่สามารถดึงข้อมูล GameResult ได้", new string[] {
                        "record_mock"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
testRunner.Given("The GetGameResultExecutor has been created and initialized");
#line 39
testRunner.And("Sent roundID\'-5\' for get game result");
#line 40
testRunner.When("Call GetGameResultExecutor() for validate roundID");
#line 41
testRunner.Then("the game result should be throw exception");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
