// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.Colors.WebExecutors.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GetGameResultFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetGameResultFeature.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetGameResult", "In order to get game result\r\nAs a system\r\nI want to get game result when game fin" +
                    "ish", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("sent tableId and roundID that available")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetGameResult")]
        public virtual void SentTableIdAndRoundIDThatAvailable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("sent tableId and roundID that available", new string[] {
                        "record_mock"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
testRunner.Given("The GameRoundInformation has been created and initialized");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "BlackPot",
                        "WhitePot",
                        "HandCount"});
            table1.AddRow(new string[] {
                        "23",
                        "24",
                        "13"});
#line 9
testRunner.And("Server has game information", ((string)(null)), table1);
#line 12
testRunner.When("Call GetGameResultExecutor(RoundID\'1\')");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "BlackPot",
                        "WhitePot",
                        "HandCount"});
            table2.AddRow(new string[] {
                        "23",
                        "24",
                        "13"});
#line 13
testRunner.Then("the game result should be", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("sent anothor data which available in DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetGameResult")]
        public virtual void SentAnothorDataWhichAvailableInDB()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("sent anothor data which available in DB", new string[] {
                        "record_mock"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
testRunner.Given("The GameRoundInformation has been created and initialized");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "BlackPot",
                        "WhitePot",
                        "HandCount"});
            table3.AddRow(new string[] {
                        "50",
                        "100",
                        "20"});
#line 20
testRunner.And("Server has game information", ((string)(null)), table3);
#line 23
testRunner.When("Call GetGameResultExecutor(RoundID\'2\')");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "BlackPot",
                        "WhitePot",
                        "HandCount"});
            table4.AddRow(new string[] {
                        "50",
                        "100",
                        "20"});
#line 24
testRunner.Then("the game result should be", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("RoundID is not available")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetGameResult")]
        public virtual void RoundIDIsNotAvailable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RoundID is not available", new string[] {
                        "record_mock"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
testRunner.Given("The GameRoundInformation has been created and initialized");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "BlackPot",
                        "WhitePot",
                        "HandCount"});
#line 31
testRunner.And("Server has game information", ((string)(null)), table5);
#line 34
testRunner.When("Call GetGameResultExecutor(RoundID\'3\')");
#line 35
testRunner.Then("the game result should be null");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
