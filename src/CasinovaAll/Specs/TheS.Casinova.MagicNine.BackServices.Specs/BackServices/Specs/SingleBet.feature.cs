// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.MagicNine.BackServices.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SingleBetFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SingleBet.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SingleBet", "In order to bet game by player\r\nAs a back server\r\nI want to be create bet informa" +
                    "tion to server", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "NonRefundable",
                        "Refundable"});
            table1.AddRow(new string[] {
                        "OhAe",
                        "463.61",
                        "200"});
            table1.AddRow(new string[] {
                        "Boy",
                        "0.99",
                        "0"});
            table1.AddRow(new string[] {
                        "Toommy",
                        "36.95",
                        "37"});
            table1.AddRow(new string[] {
                        "Au",
                        "234.00",
                        "326"});
            table1.AddRow(new string[] {
                        "Game",
                        "1",
                        "5"});
            table1.AddRow(new string[] {
                        "Khag",
                        "0.52",
                        "45"});
            table1.AddRow(new string[] {
                        "Ple",
                        "0.99",
                        "452"});
#line 8
testRunner.Given("(SingleBet)server has player information as:", ((string)(null)), table1);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(SingleBet)ผู้เล่นลงพนันเอง โดยผู้เล่นมีชิฟพอและชิฟตายมากกว่าจำนวนเงินที่ลงพนัน ร" +
            "ะบบบันทึกประวัติการลงพนันของผู้เล่นและหักเฉพาะชิฟตาย")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SingleBet")]
        public virtual void SingleBetผเลนลงพนนเองโดยผเลนมชฟพอและชฟตายมากกวาจำนวนเงนทลงพนนระบบบนทกประวตการลงพนนของผเลนและหกเฉพาะชฟตาย()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(SingleBet)ผู้เล่นลงพนันเอง โดยผู้เล่นมีชิฟพอและชิฟตายมากกว่าจำนวนเงินที่ลงพนัน ร" +
                    "ะบบบันทึกประวัติการลงพนันของผู้เล่นและหักเฉพาะชิฟตาย", new string[] {
                        "record_mock",
                        "record_mock"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
testRunner.Given("The SingleBetExecutor has been created and initialized");
#line 21
testRunner.And("(SingleBet)sent name: \'OhAe\' the player\'s balance should recieved");
#line 22
testRunner.And("the player\'s balance should be update only bonuschips, Amount: \'1\'");
#line 23
testRunner.And("the bet information assume dateTime as: \'2553/3/12 10:23\'(RoundID: \'1\', UserName:" +
                    " \'OhAe\', TrackingID: \'B21F8971-DBAB-400F-9D95-151BA24875C1\', DateTime: \'2553/3/1" +
                    "2 10:23\') should be create");
#line 24
testRunner.When("call SingleBetExecutor(RoundID: \'1\', UserName: \'OhAe\', TrackingID: \'B21F8971-DBAB" +
                    "-400F-9D95-151BA24875C1\')");
#line 25
testRunner.Then("the result should be create");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(SingleBet)ผู้เล่นลงพนันเอง โดยผู้เล่นมีชิฟพอและชิฟตายน้อยกว่าค่าดูสีที่ชนะระบบหั" +
            "กชิฟเป็นเพิ่ม ระบบบันทึกประวัติการดำเนินการ(ดูสีที่ชนะ)ของผู้เล่นและหักชิฟเป็นแล" +
            "ะชิฟตาย")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SingleBet")]
        public virtual void SingleBetผเลนลงพนนเองโดยผเลนมชฟพอและชฟตายนอยกวาคาดสทชนะระบบหกชฟเปนเพมระบบบนทกประวตการดำเนนการดสทชนะของผเลนและหกชฟเปนและชฟตาย()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(SingleBet)ผู้เล่นลงพนันเอง โดยผู้เล่นมีชิฟพอและชิฟตายน้อยกว่าค่าดูสีที่ชนะระบบหั" +
                    "กชิฟเป็นเพิ่ม ระบบบันทึกประวัติการดำเนินการ(ดูสีที่ชนะ)ของผู้เล่นและหักชิฟเป็นแล" +
                    "ะชิฟตาย", new string[] {
                        "record_mock"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
testRunner.Given("The SingleBetExecutor has been created and initialized");
#line 30
testRunner.And("(SingleBet)sent name: \'Khag\' the player\'s balance should recieved");
#line 31
testRunner.And("(SingleBet)the player\'s balance should be update both chips, Amount: \'1\'");
#line 32
testRunner.And("the bet information assume dateTime as: \'2553/3/12 10:23\'(RoundID: \'1\', UserName:" +
                    " \'Khag\', TrackingID: \'B21F8971-DBAB-400F-9D95-151BA24875C1\', DateTime: \'2553/3/1" +
                    "2 10:23\') should be create");
#line 33
testRunner.When("call SingleBetExecutor(RoundID: \'1\', UserName: \'Khag\', TrackingID: \'B21F8971-DBAB" +
                    "-400F-9D95-151BA24875C1\')");
#line 34
testRunner.Then("the result should be create");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(SingleBet)ผู้เล่นลงพนันเอง โดยผู้เล่นมีชิฟไม่พอ ระบบแจ้งเตือนว่าผู้เล่นมีชิฟไม่พ" +
            "อลงพนัน")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SingleBet")]
        public virtual void SingleBetผเลนลงพนนเองโดยผเลนมชฟไมพอระบบแจงเตอนวาผเลนมชฟไมพอลงพนน()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(SingleBet)ผู้เล่นลงพนันเอง โดยผู้เล่นมีชิฟไม่พอ ระบบแจ้งเตือนว่าผู้เล่นมีชิฟไม่พ" +
                    "อลงพนัน", new string[] {
                        "record_mock"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
testRunner.Given("The SingleBetExecutor has been created and initialized");
#line 39
testRunner.And("(SingleBet)sent name: \'Boy\' the player\'s balance should recieved");
#line 40
testRunner.When("Expected exception and call SingleBetExecutor(RoundID: \'2\', UserName: \'Boy\', Trac" +
                    "kingID: \'B21F8971-DBAB-400F-9D95-151BA24875C1\')");
#line 41
testRunner.Then("the result should be throw exception");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
