// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.PlayerAccount.WebExecutors.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GetPlayerAccountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetPlayerAccountFeature.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetPlayerAccount", "In order to get player account\r\nAs a system\r\nI want to get player account", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountType",
                        "UserName",
                        "CardType",
                        "AccountNo",
                        "CVV",
                        "ExpireDate",
                        "Active"});
            table1.AddRow(new string[] {
                        "Primary",
                        "OhAe",
                        "Visa",
                        "1802345673888921",
                        "0253",
                        "10/31/2010",
                        "True"});
            table1.AddRow(new string[] {
                        "Primary",
                        "Boy",
                        "Master\tCard",
                        "0019342567188211",
                        "4830",
                        "11/30/2010",
                        "True"});
            table1.AddRow(new string[] {
                        "Primary",
                        "Nit",
                        "Visa",
                        "0012214544543212",
                        "3223",
                        "12/31/2010",
                        "True"});
#line 8
testRunner.Given("Server has player account information for get data as:", ((string)(null)), table1);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[GetPlayerAccount]ผู้เล่นต้องการข้อมูลบัญชีหลัก ระบบได้รับข้อมูลถูกต้อง และใน ser" +
            "ver มีข้อมูลที่ระบบต้องการ ระบบสามารถดึงข้อมูลบัญชีของผู้เล่นได้")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetPlayerAccount")]
        public virtual void GetPlayerAccountผเลนตองการขอมลบญชหลกระบบไดรบขอมลถกตองและในServerมขอมลทระบบตองการระบบสามารถดงขอมลบญชของผเลนได()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[GetPlayerAccount]ผู้เล่นต้องการข้อมูลบัญชีหลัก ระบบได้รับข้อมูลถูกต้อง และใน ser" +
                    "ver มีข้อมูลที่ระบบต้องการ ระบบสามารถดึงข้อมูลบัญชีของผู้เล่นได้", new string[] {
                        "record_mock",
                        "record_mock"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
testRunner.Given("The GetPlayerAccountExecutor has been created and initialized");
#line 17
testRunner.And("Sent UserName \'Nit\' AccountType \'Primary\'");
#line 18
testRunner.When("Call GetPlayerAccountExecutor()");
#line 19
testRunner.Then("The result of get player account should be as : CardType \'Visa\' AccountNo \'001221" +
                    "4544543212\' CVV \'3223\' ExpireDate \'12/31/2010\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[GetPlayerAccount]ผู้เล่นต้องการข้อมูลบัญชีสำรอง ระบบได้รับข้อมูลถูกต้อง แต่ใน se" +
            "rver ยังไม่มีข้อมูลบัญชีสำรอง ระบบดึงข้อมูลบัญชีของผู้เล่น ไม่มีข้อมูลใดๆ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetPlayerAccount")]
        public virtual void GetPlayerAccountผเลนตองการขอมลบญชสำรองระบบไดรบขอมลถกตองแตในServerยงไมมขอมลบญชสำรองระบบดงขอมลบญชของผเลนไมมขอมลใดๆ()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[GetPlayerAccount]ผู้เล่นต้องการข้อมูลบัญชีสำรอง ระบบได้รับข้อมูลถูกต้อง แต่ใน se" +
                    "rver ยังไม่มีข้อมูลบัญชีสำรอง ระบบดึงข้อมูลบัญชีของผู้เล่น ไม่มีข้อมูลใดๆ", new string[] {
                        "record_mock"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
testRunner.Given("The GetPlayerAccountExecutor has been created and initialized");
#line 24
testRunner.And("Sent UserName \'Nit\' AccountType \'Secondary\'");
#line 25
testRunner.When("Call GetPlayerAccountExecutor()");
#line 26
testRunner.Then("The result of get player account should be null");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[GetPlayerAccount]ผู้เล่นต้องการข้อมูลบัญชีหลัก ระบบได้รับข้อมูล username ที่ไม่ม" +
            "ีใน server ระบบดึงข้อมูลบัญชีของผู้เล่น ไม่มีข้อมูลใดๆ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetPlayerAccount")]
        public virtual void GetPlayerAccountผเลนตองการขอมลบญชหลกระบบไดรบขอมลUsernameทไมมในServerระบบดงขอมลบญชของผเลนไมมขอมลใดๆ()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[GetPlayerAccount]ผู้เล่นต้องการข้อมูลบัญชีหลัก ระบบได้รับข้อมูล username ที่ไม่ม" +
                    "ีใน server ระบบดึงข้อมูลบัญชีของผู้เล่น ไม่มีข้อมูลใดๆ", new string[] {
                        "record_mock"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
testRunner.Given("The GetPlayerAccountExecutor has been created and initialized");
#line 32
testRunner.And("Sent UserName \'Meaw\' AccountType \'Primary\'");
#line 33
testRunner.When("Call GetPlayerAccountExecutor()");
#line 34
testRunner.Then("The result of get player account should be null");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[GetPlayerAccount]ผู้เล่นต้องการข้อมูลบัญชีหลัก ระบบไม่ได้รับข้อมูล username ระบบ" +
            "ไม่สามารถดึงข้อมูลบัญชีของผู้เล่นได้")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetPlayerAccount")]
        public virtual void GetPlayerAccountผเลนตองการขอมลบญชหลกระบบไมไดรบขอมลUsernameระบบไมสามารถดงขอมลบญชของผเลนได()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[GetPlayerAccount]ผู้เล่นต้องการข้อมูลบัญชีหลัก ระบบไม่ได้รับข้อมูล username ระบบ" +
                    "ไม่สามารถดึงข้อมูลบัญชีของผู้เล่นได้", new string[] {
                        "record_mock"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
testRunner.Given("The GetPlayerAccountExecutor has been created and initialized");
#line 39
testRunner.And("Sent UserName \'\' AccountType \'Primary\' for validate get player account");
#line 40
testRunner.When("Call GetPlayerAccountExecutor() for validate input");
#line 41
testRunner.Then("The result of get player account should be throw exception");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[GetPlayerAccount]ผู้เล่นต้องการข้อมูลบัญชีหลัก ระบบไม่ได้รับข้อมูล accountType ร" +
            "ะบบไม่สามารถดึงข้อมูลบัญชีของผู้เล่นได้")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetPlayerAccount")]
        public virtual void GetPlayerAccountผเลนตองการขอมลบญชหลกระบบไมไดรบขอมลAccountTypeระบบไมสามารถดงขอมลบญชของผเลนได()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[GetPlayerAccount]ผู้เล่นต้องการข้อมูลบัญชีหลัก ระบบไม่ได้รับข้อมูล accountType ร" +
                    "ะบบไม่สามารถดึงข้อมูลบัญชีของผู้เล่นได้", new string[] {
                        "record_mock"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
testRunner.Given("The GetPlayerAccountExecutor has been created and initialized");
#line 46
testRunner.And("Sent UserName \'Nit\' AccountType \'\' for validate get player account");
#line 47
testRunner.When("Call GetPlayerAccountExecutor() for validate input");
#line 48
testRunner.Then("The result of get player account should be throw exception");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
