// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.Colors.BackServices.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CalculateGameRoundWinnerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CalculateGameRoundWinner.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CalculateGameRoundWinner", "In order to find all winner of end round\r\nAs a back server\r\nI want to be calculat" +
                    "e reward each winner", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "NonRefundable",
                        "Refundable"});
            table1.AddRow(new string[] {
                        "OhAe",
                        "463.61",
                        "200"});
            table1.AddRow(new string[] {
                        "Boy",
                        "121.99",
                        "321"});
            table1.AddRow(new string[] {
                        "Toommy",
                        "36.95",
                        "37"});
            table1.AddRow(new string[] {
                        "Au",
                        "234.00",
                        "326"});
#line 8
testRunner.Given("(Colors_CalculateGameRoundWinner)server has player profile information as:", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "BlackPot",
                        "WhitePot"});
            table2.AddRow(new string[] {
                        "1",
                        "1526",
                        "1263"});
            table2.AddRow(new string[] {
                        "2",
                        "123",
                        "456"});
            table2.AddRow(new string[] {
                        "3",
                        "12",
                        "74"});
            table2.AddRow(new string[] {
                        "4",
                        "156",
                        "123"});
#line 15
testRunner.Given("(Colors_CalculateGameRoundWinner)server has game round information as:", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "UserName",
                        "ActionType",
                        "BonusChips",
                        "Chips",
                        "Amount"});
            table3.AddRow(new string[] {
                        "1",
                        "OhAe",
                        "White",
                        "3",
                        "3",
                        "6"});
            table3.AddRow(new string[] {
                        "1",
                        "OhAe",
                        "Black",
                        "7",
                        "0",
                        "7"});
            table3.AddRow(new string[] {
                        "1",
                        "Boy",
                        "White",
                        "351",
                        "3",
                        "354"});
            table3.AddRow(new string[] {
                        "1",
                        "Boy",
                        "Black",
                        "0",
                        "12",
                        "12"});
            table3.AddRow(new string[] {
                        "1",
                        "Au",
                        "White",
                        "3",
                        "3",
                        "6"});
            table3.AddRow(new string[] {
                        "1",
                        "Au",
                        "Black",
                        "7",
                        "0",
                        "7"});
#line 22
testRunner.Given("(Colors_CalculateGameRoundWinner)server has player action information as:", ((string)(null)), table3);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(Colors_CalculateGameRoundWinner)ผู้เล่นได้กำไร โดยลงพนันทั้งสองสี ระบบคำนวณเงินร" +
            "างวัลแล้วส่งต่อให้ระบบ Reward ทำงานต่อ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CalculateGameRoundWinner")]
        public virtual void Colors_CalculateGameRoundWinnerผเลนไดกำไรโดยลงพนนทงสองสระบบคำนวณเงนรางวลแลวสงตอใหระบบRewardทำงานตอ()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(Colors_CalculateGameRoundWinner)ผู้เล่นได้กำไร โดยลงพนันทั้งสองสี ระบบคำนวณเงินร" +
                    "างวัลแล้วส่งต่อให้ระบบ Reward ทำงานต่อ", new string[] {
                        "record_mock",
                        "record_mock"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
testRunner.Given("The CalculateGameRoundWinnerExecutor has been created and initialized");
#line 34
testRunner.And("(Colors_CalculateGameRoundWinner)sent name: \'OhAe\' the player\'s balance should re" +
                    "cieved");
#line 35
testRunner.And("(Colors_CalculateGameRoundWinner)sent roundID: \'1\' the round information should r" +
                    "ecieved");
#line 36
testRunner.And("(Colors_CalculateGameRoundWinner)sent roundID: \'1\' the player action information " +
                    "should recieved");
#line 37
testRunner.When("(Colors_CalculateGameRoundWinner)call CalculateGameRoundWinnerExecutor(RoundID: \'" +
                    "1\')");
#line 38
testRunner.Then("the result should be create");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
