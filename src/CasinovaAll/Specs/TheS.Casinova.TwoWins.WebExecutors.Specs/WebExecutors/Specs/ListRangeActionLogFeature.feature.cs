// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.TwoWins.WebExecutors.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ListRangeActionLogFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ListRangeActionLogFeature.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ListRangeActionLog", "In order list range action log\r\nAs a system\r\nI want to list range action log info" +
                    "rmation", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "UserName",
                        "HandID",
                        "Amount",
                        "OldAmount",
                        "Pot",
                        "WinState",
                        "Reward",
                        "HandStatus",
                        "Change",
                        "DateTime"});
            table1.AddRow(new string[] {
                        "1",
                        "Nayit",
                        "B324",
                        "700",
                        "0",
                        "700",
                        "",
                        "0",
                        "Normal",
                        "False",
                        "10:54 12/13/2010"});
            table1.AddRow(new string[] {
                        "2",
                        "Nayit",
                        "DF23",
                        "28",
                        "0",
                        "28",
                        "Low",
                        "78",
                        "Normal",
                        "False",
                        "10:58 12/13/2010"});
            table1.AddRow(new string[] {
                        "1",
                        "Nayit",
                        "B324",
                        "1500",
                        "700",
                        "1500",
                        "Hight",
                        "1901",
                        "Normal",
                        "True",
                        "11:02 12/13/2010"});
            table1.AddRow(new string[] {
                        "1",
                        "Kob",
                        "54DE",
                        "44",
                        "0",
                        "1544",
                        "Low",
                        "99",
                        "Normal",
                        "False",
                        "11:14 12/13/2010"});
            table1.AddRow(new string[] {
                        "2",
                        "Eye",
                        "123W",
                        "550",
                        "0",
                        "578",
                        "",
                        "0",
                        "Normal",
                        "False",
                        "11:20 12/13/2010"});
            table1.AddRow(new string[] {
                        "1",
                        "Krai",
                        "43EE",
                        "133",
                        "0",
                        "1677",
                        "",
                        "0",
                        "Normal",
                        "False",
                        "11:21 12/13/2010"});
            table1.AddRow(new string[] {
                        "2",
                        "Jae",
                        "1267",
                        "1000",
                        "0",
                        "1578",
                        "Hight",
                        "1500",
                        "Critical",
                        "False",
                        "11:29 12/13/2010"});
            table1.AddRow(new string[] {
                        "1",
                        "Sak",
                        "VD66",
                        "323",
                        "0",
                        "2000",
                        "",
                        "0",
                        "Critical",
                        "False",
                        "11:30 12/13/2010"});
#line 8
testRunner.Given("Server has bet data of finished game #ListRangeActionLog", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "Pot",
                        "HandsCount"});
            table2.AddRow(new string[] {
                        "1",
                        "2000",
                        "5"});
            table2.AddRow(new string[] {
                        "2",
                        "1578",
                        "3"});
#line 19
testRunner.And("Server has Pot and HandCount information as:", ((string)(null)), table2);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[ListRangeActionLog]ระบบได้รับข้อมูล FromRoundID, ThruRoundID ถูกต้อง ระบบสามารถด" +
            "ึงข้อมูล RangeActionLog ได้")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ListRangeActionLog")]
        public virtual void ListRangeActionLogระบบไดรบขอมลFromRoundIDThruRoundIDถกตองระบบสามารถดงขอมลRangeActionLogได()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[ListRangeActionLog]ระบบได้รับข้อมูล FromRoundID, ThruRoundID ถูกต้อง ระบบสามารถด" +
                    "ึงข้อมูล RangeActionLog ได้", new string[] {
                        "record_mock",
                        "record_mock"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
testRunner.Given("The ListRangeActionLogExecutor has been created and initialized");
#line 27
testRunner.And("Sent FromRoundID\'1\' ThruRoundID\'2\' to list range action log");
#line 28
testRunner.When("Call ListRangeActionLogExecutor()");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoundID",
                        "UserName",
                        "HandID",
                        "Amount",
                        "OldAmount",
                        "Pot",
                        "WinState",
                        "Reward",
                        "HandStatus",
                        "Change",
                        "DateTime"});
            table3.AddRow(new string[] {
                        "1",
                        "Nayit",
                        "B324",
                        "1500",
                        "700",
                        "1500",
                        "Hight",
                        "1901",
                        "Normal",
                        "True",
                        "11:02 12/13/2010"});
            table3.AddRow(new string[] {
                        "1",
                        "Kob",
                        "54DE",
                        "44",
                        "0",
                        "1544",
                        "Low",
                        "99",
                        "Normal",
                        "False",
                        "11:14 12/13/2010"});
            table3.AddRow(new string[] {
                        "2",
                        "Nayit",
                        "DF23",
                        "28",
                        "0",
                        "28",
                        "Low",
                        "78",
                        "Normal",
                        "False",
                        "10:58 12/13/2010"});
            table3.AddRow(new string[] {
                        "2",
                        "Jae",
                        "1267",
                        "1000",
                        "0",
                        "1578",
                        "Hight",
                        "1500",
                        "Critical",
                        "False",
                        "11:29 12/13/2010"});
#line 29
testRunner.Then("RangeActionLog information should be as :", ((string)(null)), table3);
#line 36
testRunner.And("Game result Pot\'3578\' HandCount\'8\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
