// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.PlayerAccount.BackServices.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CancelPlayerAccountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CancelPlayerAccount.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CancelPlayerAccount", "In order to cancel player account\r\nAs a back server\r\nI want to be deactivate play" +
                    "er account", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "AccountType",
                        "CardType",
                        "Active"});
            table1.AddRow(new string[] {
                        "OhAe",
                        "Primary",
                        "VISA",
                        "true"});
            table1.AddRow(new string[] {
                        "OhAe",
                        "Secondary",
                        "MasterCard",
                        "true"});
            table1.AddRow(new string[] {
                        "Boy",
                        "Primary",
                        "VISA",
                        "true"});
            table1.AddRow(new string[] {
                        "Boy",
                        "Secondary",
                        "MasterCard",
                        "false"});
#line 8
testRunner.Given("(CancelPlayerAccount)server has player account information as:", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "Password"});
            table2.AddRow(new string[] {
                        "OhAe",
                        "aaaa"});
            table2.AddRow(new string[] {
                        "Boy",
                        "bbbb"});
            table2.AddRow(new string[] {
                        "Nittaya",
                        "cccc"});
            table2.AddRow(new string[] {
                        "Au",
                        "dddd"});
#line 15
testRunner.Given("(CancelPlayerAccount)server has user profile information as:", ((string)(null)), table2);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(CancelPlayerAccount)ผู้เล่นยกเลิกบัญชีหลัก ที่เปิดใช้งานไว้ รหัสผ่านยืนยันถูกต้อ" +
            "ง, ระบบยกเลิกบัญชีของผู้เล่น")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CancelPlayerAccount")]
        public virtual void CancelPlayerAccountผเลนยกเลกบญชหลกทเปดใชงานไวรหสผานยนยนถกตองระบบยกเลกบญชของผเลน()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(CancelPlayerAccount)ผู้เล่นยกเลิกบัญชีหลัก ที่เปิดใช้งานไว้ รหัสผ่านยืนยันถูกต้อ" +
                    "ง, ระบบยกเลิกบัญชีของผู้เล่น", new string[] {
                        "record_mock",
                        "record_mock"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
testRunner.Given("The CancelPlayerAccountExecutor has been created and initialized");
#line 26
testRunner.And("sent UserName: \'OhAe\', AccountType: \'Primary\' the player account informaiton shou" +
                    "ld recieved");
#line 27
testRunner.And("(CancelPlayerAccount)sent UserName: \'OhAe\' player profile should recieved");
#line 28
testRunner.And("the player account information should be create(UserName: \'OhAe\', AccountType: \'P" +
                    "rimary\')");
#line 29
testRunner.When("call CancelPlayerAccountExecutor(UserName: \'OhAe\', AccountType: \'Primary\', Passwo" +
                    "rd: \'aaaa\')");
#line 30
testRunner.Then("the result should be create");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(CancelPlayerAccount)ผู้เล่นยกเลิกบัญชีรอง ที่เปิดใช้งานไว้ รหัสผ่านยืนยันถูกต้อง" +
            ", ระบบยกเลิกบัญชีของผู้เล่น")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CancelPlayerAccount")]
        public virtual void CancelPlayerAccountผเลนยกเลกบญชรองทเปดใชงานไวรหสผานยนยนถกตองระบบยกเลกบญชของผเลน()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(CancelPlayerAccount)ผู้เล่นยกเลิกบัญชีรอง ที่เปิดใช้งานไว้ รหัสผ่านยืนยันถูกต้อง" +
                    ", ระบบยกเลิกบัญชีของผู้เล่น", new string[] {
                        "record_mock"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
testRunner.Given("The CancelPlayerAccountExecutor has been created and initialized");
#line 35
testRunner.And("sent UserName: \'OhAe\', AccountType: \'Secondary\' the player account informaiton sh" +
                    "ould recieved");
#line 36
testRunner.And("(CancelPlayerAccount)sent UserName: \'OhAe\' player profile should recieved");
#line 37
testRunner.And("the player account information should be create(UserName: \'OhAe\', AccountType: \'S" +
                    "econdary\')");
#line 38
testRunner.When("call CancelPlayerAccountExecutor(UserName: \'OhAe\', AccountType: \'Secondary\', Pass" +
                    "word: \'aaaa\')");
#line 39
testRunner.Then("the result should be create");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(CancelPlayerAccount)ผู้เล่นยกเลิกบัญชีหลัก ที่เปิดใช้งานไว้ รหัสผ่านยืนยันไม่ถูก" +
            "ต้อง, ระบบแจ้งเตือน")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CancelPlayerAccount")]
        public virtual void CancelPlayerAccountผเลนยกเลกบญชหลกทเปดใชงานไวรหสผานยนยนไมถกตองระบบแจงเตอน()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(CancelPlayerAccount)ผู้เล่นยกเลิกบัญชีหลัก ที่เปิดใช้งานไว้ รหัสผ่านยืนยันไม่ถูก" +
                    "ต้อง, ระบบแจ้งเตือน", new string[] {
                        "record_mock"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
testRunner.Given("The CancelPlayerAccountExecutor has been created and initialized");
#line 44
testRunner.And("sent UserName: \'OhAe\', AccountType: \'Primary\' the player account informaiton shou" +
                    "ld recieved");
#line 45
testRunner.And("(CancelPlayerAccount)sent UserName: \'OhAe\' player profile should recieved");
#line 46
testRunner.When("Expected exception and call CancelPlayerAccountExecutor(UserName: \'OhAe\', Account" +
                    "Type: \'Primary\', Password: \'xxxx\')");
#line 47
testRunner.Then("the result should be throw exception");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(CancelPlayerAccount)ผู้เล่นยกเลิกบัญชีรอง ที่ไม่เปิดใช้งานไว้ รหัสผ่านยืนยันถูกต" +
            "้อง, ระบบแจ้งเตือน")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CancelPlayerAccount")]
        public virtual void CancelPlayerAccountผเลนยกเลกบญชรองทไมเปดใชงานไวรหสผานยนยนถกตองระบบแจงเตอน()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(CancelPlayerAccount)ผู้เล่นยกเลิกบัญชีรอง ที่ไม่เปิดใช้งานไว้ รหัสผ่านยืนยันถูกต" +
                    "้อง, ระบบแจ้งเตือน", new string[] {
                        "record_mock"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
testRunner.Given("The CancelPlayerAccountExecutor has been created and initialized");
#line 53
testRunner.And("sent UserName: \'Boy\', AccountType: \'Secondary\' the player account informaiton sho" +
                    "uld recieved");
#line 54
testRunner.And("(CancelPlayerAccount)sent UserName: \'OhAe\' player profile should recieved");
#line 55
testRunner.When("Expected exception and call CancelPlayerAccountExecutor(UserName: \'OhAe\', Account" +
                    "Type: \'Primary\', Password: \'xxxx\')");
#line 56
testRunner.Then("the result should be throw exception");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
