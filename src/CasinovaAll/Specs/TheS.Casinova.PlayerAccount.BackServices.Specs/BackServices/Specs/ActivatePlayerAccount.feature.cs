// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.PlayerAccount.BackServices.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ActivatePlayerAccountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ActivatePlayerAccount.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ActivatePlayerAccount", "In order to activate player account\r\nAs a back server\r\nI want to be activate play" +
                    "er account", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "AccountType",
                        "CardType",
                        "Active"});
            table1.AddRow(new string[] {
                        "OhAe",
                        "Primary",
                        "VISA",
                        "false"});
            table1.AddRow(new string[] {
                        "OhAe",
                        "Secondary",
                        "MasterCard",
                        "false"});
            table1.AddRow(new string[] {
                        "Boy",
                        "Primary",
                        "VISA",
                        "true"});
            table1.AddRow(new string[] {
                        "Boy",
                        "Secondary",
                        "MasterCard",
                        "true"});
#line 8
testRunner.Given("(ActivatePlayerAccount)server has player account information as:", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "Password"});
            table2.AddRow(new string[] {
                        "OhAe",
                        "aaaa"});
            table2.AddRow(new string[] {
                        "Boy",
                        "bbbb"});
            table2.AddRow(new string[] {
                        "Nittaya",
                        "cccc"});
            table2.AddRow(new string[] {
                        "Au",
                        "dddd"});
#line 15
testRunner.Given("(ActivatePlayerAccount)server has user profile information as:", ((string)(null)), table2);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(ActivatePlayerAccount)ผู้เล่นเปิดใช้งานบัญชีหลัก ที่ถูกยกเลิกไว้ รหัสผ่านยืนยันถ" +
            "ูกต้อง, ระบบเปิดใช้งานบัญชีของผู้เล่น")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ActivatePlayerAccount")]
        public virtual void ActivatePlayerAccountผเลนเปดใชงานบญชหลกทถกยกเลกไวรหสผานยนยนถกตองระบบเปดใชงานบญชของผเลน()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(ActivatePlayerAccount)ผู้เล่นเปิดใช้งานบัญชีหลัก ที่ถูกยกเลิกไว้ รหัสผ่านยืนยันถ" +
                    "ูกต้อง, ระบบเปิดใช้งานบัญชีของผู้เล่น", new string[] {
                        "record_mock",
                        "record_mock"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
testRunner.Given("The ActivatePlayerAccount has been created and initialized");
#line 25
testRunner.And("(ActivatePlayerAccount)sent UserName: \'OhAe\', AccountType: \'Primary\' the player a" +
                    "ccount informaiton should recieved");
#line 26
testRunner.And("(ActivatePlayerAccount)sent UserName: \'OhAe\' player profile should recieved");
#line 27
testRunner.When("call ActivatePlayerAccount(UserName: \'OhAe\', AccountType: \'Primary\', Password: \'a" +
                    "aaa\')");
#line 28
testRunner.Then("the result should be create");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(ActivatePlayerAccount)ผู้เล่นเปิดใช้งานบัญชีรอง ที่ถูกยกเลิกไว้ รหัสผ่านยืนยันถู" +
            "กต้อง, ระบบเปิดใช้งานบัญชีของผู้เล่น")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ActivatePlayerAccount")]
        public virtual void ActivatePlayerAccountผเลนเปดใชงานบญชรองทถกยกเลกไวรหสผานยนยนถกตองระบบเปดใชงานบญชของผเลน()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(ActivatePlayerAccount)ผู้เล่นเปิดใช้งานบัญชีรอง ที่ถูกยกเลิกไว้ รหัสผ่านยืนยันถู" +
                    "กต้อง, ระบบเปิดใช้งานบัญชีของผู้เล่น", new string[] {
                        "record_mock"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
testRunner.Given("The ActivatePlayerAccount has been created and initialized");
#line 33
testRunner.And("(ActivatePlayerAccount)sent UserName: \'OhAe\', AccountType: \'Secondary\' the player" +
                    " account informaiton should recieved");
#line 34
testRunner.And("(ActivatePlayerAccount)sent UserName: \'OhAe\' player profile should recieved");
#line 35
testRunner.When("call ActivatePlayerAccount(UserName: \'OhAe\', AccountType: \'Secondary\', Password: " +
                    "\'aaaa\')");
#line 36
testRunner.Then("the result should be create");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(ActivatePlayerAccount)ผู้เล่นเปิดใช้งานบัญชีหลัก ที่ถูกยกเลิกไว้ รหัสผ่านยืนยันไ" +
            "ม่ถูกต้อง, ระบบแจ้งเตือน")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ActivatePlayerAccount")]
        public virtual void ActivatePlayerAccountผเลนเปดใชงานบญชหลกทถกยกเลกไวรหสผานยนยนไมถกตองระบบแจงเตอน()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(ActivatePlayerAccount)ผู้เล่นเปิดใช้งานบัญชีหลัก ที่ถูกยกเลิกไว้ รหัสผ่านยืนยันไ" +
                    "ม่ถูกต้อง, ระบบแจ้งเตือน", new string[] {
                        "record_mock"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
testRunner.Given("The ActivatePlayerAccount has been created and initialized");
#line 41
testRunner.And("(ActivatePlayerAccount)sent UserName: \'OhAe\', AccountType: \'Secondary\' the player" +
                    " account informaiton should recieved");
#line 42
testRunner.And("(ActivatePlayerAccount)sent UserName: \'OhAe\' player profile should recieved");
#line 43
testRunner.When("Expected exception and call ActivatePlayerAccount(UserName: \'OhAe\', AccountType: " +
                    "\'Secondary\', Password: \'XXXX\')");
#line 44
testRunner.Then("the result should be throw exception");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("(ActivatePlayerAccount)ผู้เล่นเปิดใช้งานบัญชีรอง เปิดใช้งานอยู่ รหัสผ่านยืนยันถูก" +
            "ต้อง, ระบบแจ้งเตือน")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ActivatePlayerAccount")]
        public virtual void ActivatePlayerAccountผเลนเปดใชงานบญชรองเปดใชงานอยรหสผานยนยนถกตองระบบแจงเตอน()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(ActivatePlayerAccount)ผู้เล่นเปิดใช้งานบัญชีรอง เปิดใช้งานอยู่ รหัสผ่านยืนยันถูก" +
                    "ต้อง, ระบบแจ้งเตือน", new string[] {
                        "record_mock"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
testRunner.Given("The ActivatePlayerAccount has been created and initialized");
#line 49
testRunner.And("(ActivatePlayerAccount)sent UserName: \'Boy\', AccountType: \'Secondary\' the player " +
                    "account informaiton should recieved");
#line 50
testRunner.And("(ActivatePlayerAccount)sent UserName: \'Boy\' player profile should recieved");
#line 51
testRunner.When("Expected exception and call ActivatePlayerAccount(UserName: \'Boy\', AccountType: \'" +
                    "Secondary\', Password: \'aaaa\')");
#line 52
testRunner.Then("the result should be throw exception");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
