// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.ColorsGame.BackServices
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ListGameTableConfigurationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ListGameTableConfigurations.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ListGameTableConfigurations", "In order to list game table configuration\r\nAs a back server\r\nI want to be told th" +
                    "e game table configuration", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ระบบรับข้อมูลชื่อ config, ระบบดึงข้อมูล game configurations กลับ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ListGameTableConfigurations")]
        public virtual void ระบบรบขอมลชอConfigระบบดงขอมลGameConfigurationsกลบ()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ระบบรับข้อมูลชื่อ config, ระบบดึงข้อมูล game configurations กลับ", new string[] {
                        "record_mock"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
testRunner.Given("The ListGameTableConfigurations has been created and initialized");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "TableID",
                        "GameDuration",
                        "Interval"});
            table1.AddRow(new string[] {
                        "config1",
                        "1",
                        "10",
                        "5"});
            table1.AddRow(new string[] {
                        "config1",
                        "2",
                        "20",
                        "10"});
            table1.AddRow(new string[] {
                        "config1",
                        "3",
                        "15",
                        "7"});
#line 9
testRunner.And("sent Configuration name: \'config1\' and expected game configuration as:", ((string)(null)), table1);
#line 15
testRunner.When("call ListGameTableConfigurations(name: \'config1\')");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "TableID",
                        "GameDuration",
                        "Interval"});
            table2.AddRow(new string[] {
                        "config1",
                        "1",
                        "10",
                        "5"});
            table2.AddRow(new string[] {
                        "config1",
                        "2",
                        "20",
                        "10"});
            table2.AddRow(new string[] {
                        "config1",
                        "3",
                        "15",
                        "7"});
#line 16
testRunner.Then("the game configurations should be(\'config1\'):", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ระบบรับข้อมูลชื่อ config และมีข้อมูล config หลายชื่อ, ระบบดึงข้อมูล game configur" +
            "ations กลับ")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ListGameTableConfigurations")]
        public virtual void ระบบรบขอมลชอConfigและมขอมลConfigหลายชอระบบดงขอมลGameConfigurationsกลบ()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ระบบรับข้อมูลชื่อ config และมีข้อมูล config หลายชื่อ, ระบบดึงข้อมูล game configur" +
                    "ations กลับ", new string[] {
                        "record_mock"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
testRunner.Given("The ListGameTableConfigurations has been created and initialized");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "TableID",
                        "GameDuration",
                        "Interval"});
            table3.AddRow(new string[] {
                        "config1",
                        "1",
                        "10",
                        "5"});
            table3.AddRow(new string[] {
                        "config1",
                        "2",
                        "20",
                        "10"});
            table3.AddRow(new string[] {
                        "config1",
                        "3",
                        "15",
                        "7"});
            table3.AddRow(new string[] {
                        "config2",
                        "1",
                        "10",
                        "5"});
            table3.AddRow(new string[] {
                        "config3",
                        "2",
                        "20",
                        "10"});
            table3.AddRow(new string[] {
                        "config4",
                        "3",
                        "15",
                        "7"});
#line 25
testRunner.And("sent Configuration name: \'config1\' and expected game configuration as:", ((string)(null)), table3);
#line 34
testRunner.When("call ListGameTableConfigurations(name: \'config1\')");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "TableID",
                        "GameDuration",
                        "Interval"});
            table4.AddRow(new string[] {
                        "config1",
                        "1",
                        "10",
                        "5"});
            table4.AddRow(new string[] {
                        "config1",
                        "2",
                        "20",
                        "10"});
            table4.AddRow(new string[] {
                        "config1",
                        "3",
                        "15",
                        "7"});
            table4.AddRow(new string[] {
                        "config2",
                        "1",
                        "10",
                        "5"});
            table4.AddRow(new string[] {
                        "config3",
                        "2",
                        "20",
                        "10"});
            table4.AddRow(new string[] {
                        "config4",
                        "3",
                        "15",
                        "7"});
#line 35
testRunner.Then("the game configurations should be(\'config1\'):", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
