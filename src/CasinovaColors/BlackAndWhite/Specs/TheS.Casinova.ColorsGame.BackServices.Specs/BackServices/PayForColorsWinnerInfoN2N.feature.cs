// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TheS.Casinova.ColorsGame.BackServices
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PayForColorsWinnerInfoN2NFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PayForColorsWinnerInfoN2N.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PayForColorsWinnerInfoN2N", "In order to checking all loop\r\nAs a back server\r\nI want to be check PayForColorsW" +
                    "innerInfo all loop", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "TableID",
                        "RoundID",
                        "Winner"});
            table1.AddRow(new string[] {
                        "1",
                        "23",
                        "Black"});
            table1.AddRow(new string[] {
                        "2",
                        "24",
                        "White"});
            table1.AddRow(new string[] {
                        "3",
                        "25",
                        "White"});
            table1.AddRow(new string[] {
                        "4",
                        "26",
                        "Black"});
            table1.AddRow(new string[] {
                        "5",
                        "27",
                        "White"});
#line 8
testRunner.Given("server has game information:", ((string)(null)), table1);
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("the PayForColorsWinnerInfo should call complete all loop")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PayForColorsWinnerInfoN2N")]
        public virtual void ThePayForColorsWinnerInfoShouldCallCompleteAllLoop()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the PayForColorsWinnerInfo should call complete all loop", new string[] {
                        "record_mock",
                        "record_mock"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
testRunner.Given("The PayForColorsWinnerInfoExecutor has been created and initialized");
#line 19
testRunner.And("sent UserName: \'OhAe\' and expected Balance: \'95\'");
#line 20
testRunner.And("sent TableID: \'1\', RoundID: \'23\' and expected winner: \'Black\'");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "TableID",
                        "RoundID",
                        "TrackingID",
                        "OnGoingTrackingID",
                        "TotalBlack",
                        "TotalWhite",
                        "Winner",
                        "LastUpdate"});
            table2.AddRow(new string[] {
                        "OhAe",
                        "1",
                        "23",
                        "B21F8971-DBAB-400F-9D95-151BA24875C1",
                        "B21F8971-DBAB-400F-9D95-151BA24875C1",
                        "1231",
                        "2731",
                        "Black",
                        "DateTime.Today"});
#line 21
testRunner.And("Expect game information should be add:", ((string)(null)), table2);
#line 25
testRunner.When("define PayForColorsWinnerInfo(UserName: \'OhAe\', Balance: \'100\')");
#line 26
testRunner.And("define GetRoundWinnerQuery(TableID: \'1\', RoundID: \'23\', Winner: \'Black\')");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserName",
                        "TableID",
                        "RoundID",
                        "TrackingID",
                        "OnGoingTrackingID",
                        "TotalBlack",
                        "TotalWhite",
                        "Winner",
                        "LastUpdate"});
            table3.AddRow(new string[] {
                        "OhAe",
                        "1",
                        "23",
                        "B21F8971-DBAB-400F-9D95-151BA24875C1",
                        "B21F8971-DBAB-400F-9D95-151BA24875C1",
                        "1231",
                        "2731",
                        "Black",
                        "DateTime.Today"});
#line 27
testRunner.And("define UpdateWinnerToGamePlayInfo(GamePlayInfo):", ((string)(null)), table3);
#line 30
testRunner.And("call PayForColorsWinnerInfoExecutor.Execute(PayForColorsWinnerInfoCommand);");
#line 32
testRunner.Then("the PayForColorsWinnerInfo should call complete all loop");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
