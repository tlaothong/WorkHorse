//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace SimpleNotif.OhSimpleSvc {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OhSimpleSvc.IOhSimpleService")]
    public interface IOhSimpleService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOhSimpleService/SendInfo", ReplyAction="http://tempuri.org/IOhSimpleService/SendInfoResponse")]
        System.IAsyncResult BeginSendInfo(System.Guid trackingId, string message, System.AsyncCallback callback, object asyncState);
        
        void EndSendInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOhSimpleService/SendMessage", ReplyAction="http://tempuri.org/IOhSimpleService/SendMessageResponse")]
        System.IAsyncResult BeginSendMessage(string message, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndSendMessage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOhSimpleServiceChannel : SimpleNotif.OhSimpleSvc.IOhSimpleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OhSimpleServiceClient : System.ServiceModel.ClientBase<SimpleNotif.OhSimpleSvc.IOhSimpleService>, SimpleNotif.OhSimpleSvc.IOhSimpleService {
        
        private BeginOperationDelegate onBeginSendInfoDelegate;
        
        private EndOperationDelegate onEndSendInfoDelegate;
        
        private System.Threading.SendOrPostCallback onSendInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public OhSimpleServiceClient() {
        }
        
        public OhSimpleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OhSimpleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OhSimpleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OhSimpleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendInfoCompleted;
        
        public event System.EventHandler<SendMessageCompletedEventArgs> SendMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SimpleNotif.OhSimpleSvc.IOhSimpleService.BeginSendInfo(System.Guid trackingId, string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendInfo(trackingId, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SimpleNotif.OhSimpleSvc.IOhSimpleService.EndSendInfo(System.IAsyncResult result) {
            base.Channel.EndSendInfo(result);
        }
        
        private System.IAsyncResult OnBeginSendInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid trackingId = ((System.Guid)(inValues[0]));
            string message = ((string)(inValues[1]));
            return ((SimpleNotif.OhSimpleSvc.IOhSimpleService)(this)).BeginSendInfo(trackingId, message, callback, asyncState);
        }
        
        private object[] OnEndSendInfo(System.IAsyncResult result) {
            ((SimpleNotif.OhSimpleSvc.IOhSimpleService)(this)).EndSendInfo(result);
            return null;
        }
        
        private void OnSendInfoCompleted(object state) {
            if ((this.SendInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendInfoAsync(System.Guid trackingId, string message) {
            this.SendInfoAsync(trackingId, message, null);
        }
        
        public void SendInfoAsync(System.Guid trackingId, string message, object userState) {
            if ((this.onBeginSendInfoDelegate == null)) {
                this.onBeginSendInfoDelegate = new BeginOperationDelegate(this.OnBeginSendInfo);
            }
            if ((this.onEndSendInfoDelegate == null)) {
                this.onEndSendInfoDelegate = new EndOperationDelegate(this.OnEndSendInfo);
            }
            if ((this.onSendInfoCompletedDelegate == null)) {
                this.onSendInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendInfoCompleted);
            }
            base.InvokeAsync(this.onBeginSendInfoDelegate, new object[] {
                        trackingId,
                        message}, this.onEndSendInfoDelegate, this.onSendInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SimpleNotif.OhSimpleSvc.IOhSimpleService.BeginSendMessage(string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Guid SimpleNotif.OhSimpleSvc.IOhSimpleService.EndSendMessage(System.IAsyncResult result) {
            return base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string message = ((string)(inValues[0]));
            return ((SimpleNotif.OhSimpleSvc.IOhSimpleService)(this)).BeginSendMessage(message, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            System.Guid retVal = ((SimpleNotif.OhSimpleSvc.IOhSimpleService)(this)).EndSendMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(string message) {
            this.SendMessageAsync(message, null);
        }
        
        public void SendMessageAsync(string message, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        message}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SimpleNotif.OhSimpleSvc.IOhSimpleService CreateChannel() {
            return new OhSimpleServiceClientChannel(this);
        }
        
        private class OhSimpleServiceClientChannel : ChannelBase<SimpleNotif.OhSimpleSvc.IOhSimpleService>, SimpleNotif.OhSimpleSvc.IOhSimpleService {
            
            public OhSimpleServiceClientChannel(System.ServiceModel.ClientBase<SimpleNotif.OhSimpleSvc.IOhSimpleService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSendInfo(System.Guid trackingId, string message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = trackingId;
                _args[1] = message;
                System.IAsyncResult _result = base.BeginInvoke("SendInfo", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendInfo", _args, result);
            }
            
            public System.IAsyncResult BeginSendMessage(string message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = message;
                System.IAsyncResult _result = base.BeginInvoke("SendMessage", _args, callback, asyncState);
                return _result;
            }
            
            public System.Guid EndSendMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Guid _result = ((System.Guid)(base.EndInvoke("SendMessage", _args, result)));
                return _result;
            }
        }
    }
}
