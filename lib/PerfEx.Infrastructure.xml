<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PerfEx.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:PerfEx.Infrastructure.Validation.ValidationErrorException">
            <summary>
            Convert validation errors information to exception system.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.Validation.ValidationErrorException.#ctor(PerfEx.Infrastructure.Validation.ValidationErrorCollection)">
            <summary>
            Initialize an exception from validation errors.
            </summary>
            <param name="errors">The collection of validation errors.</param>
        </member>
        <member name="P:PerfEx.Infrastructure.Validation.ValidationErrorException.Errors">
            <summary>
            Validation errors.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.ServiceObjectProviderBase`1">
            <summary>
            Base class for ServiceObjectProvider suggested implementation.<br />
            This class will dispose the ServiceObject instance automatically, if Dispose().
            </summary>
            <typeparam name="T">Type of ServiceObject.</typeparam>
        </member>
        <member name="T:PerfEx.Infrastructure.DisposableObject">
            <summary>
            Keep track objects that should be disposed and blend it to the IDisposable pattern.<br />
            This class can use as a base class or an aggregation.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.DisposableObject.AddToDisposableList(System.IDisposable)">
            <summary>
            Add an object to the disposable list.
            </summary>
            <param name="obj">An object to add to a disposable list.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.DisposableObject.AddRangeToDisposableList(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Add objects to the disposable list.
            </summary>
            <param name="collection">A collection of disposable object.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Unsafe disopse operation
            </summary>
            <param name="disposing">True if called from Dispose() method, false called from GC.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.DisposableObject.DisposeCore(System.Boolean)">
            <summary>
            Override this method for safe dispose operation
            </summary>
            <param name="disposing">Is called from Dispose() method, false called from GC.</param>
        </member>
        <member name="P:PerfEx.Infrastructure.DisposableObject.Disposed">
            <summary>
            True if this object has been disposed.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.IServiceObjectProvider`1">
            <summary>
            An abstract interface to provides access to the service object.
            </summary>
            <typeparam name="T">A service type.</typeparam>
        </member>
        <member name="P:PerfEx.Infrastructure.IServiceObjectProvider`1.ServiceProxy">
            <summary>
            Gets the service instance.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.ServiceObjectProviderBase`1.CreateServiceObject">
            <summary>
            Do actual work of creating a service object when needed.
            </summary>
            <returns>A service object.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.ICreateData`2">
            <summary>
            Provides behavior to persist the data entity to the data storage.
            </summary>
            <typeparam name="TEntity">The data entity type.</typeparam>
            <typeparam name="TCmd">The command use as an information to persist the entity.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.ICreateData`2.Create(`0,`1)">
            <summary>
            Persist the data entity to the data storage.
            </summary>
            <param name="entity">The data entity which needs to save to the storage.</param>
            <param name="cmd">The command use as an information to the method.</param>
            <returns>The persisted data entitiy.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.DependencyInjectionServiceObjectProviderAdapter`2">
            <summary>
            Adapter class for converting a type T to contract of type I (use dependency injection and lazy-load).
            </summary>
            <typeparam name="T">The type of the target object to create.</typeparam>
            <typeparam name="I">The contract interface.</typeparam>
        </member>
        <member name="T:PerfEx.Infrastructure.LazyServiceObjectProvider`2">
            <summary>
            Lazy-Load Service Object Provider (use dependency injection).
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProvider"></typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.LazyServiceObjectProvider`2.#ctor(PerfEx.Infrastructure.IDependencyContainer)">
            <summary>
            Initialize the new instance of service provider with the dependency container.
            </summary>
            <param name="container">The dependency container.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.LazyServiceObjectProvider`2.CreateServiceObject">
            <summary>
            Do actual work of creating a service object when needed.
            </summary>
            <returns>A service object.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.DependencyInjectionServiceObjectProviderAdapter`2.#ctor(PerfEx.Infrastructure.IDependencyContainer)">
            <summary>
            Initialize a new instance of the service object provider.
            </summary>
            <param name="container">The dependency container use to create an object of type T.</param>
        </member>
        <member name="T:PerfEx.Infrastructure.DependencyInjectionServiceObjectProviderAdapter`2.ServiceProviderImpl">
            <summary>
            No one should use this class directly.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.ConcreteServiceObjectProvider`1">
            <summary>
            Provides a new instance of a concrete type.<br />
            This would work perfectly with the concept of constructor injection.
            </summary>
            <typeparam name="T">A target service object type.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.ConcreteServiceObjectProvider`1.#ctor(`0)">
            <summary>
            Initializes a new instance of ConcreteServiceObjectProvider with the target object.
            </summary>
            <param name="svc">A target service object.</param>
        </member>
        <member name="P:PerfEx.Infrastructure.ConcreteServiceObjectProvider`1.ServiceProxy">
            <summary>
            Gets the service instance.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.ConcreteServiceObjectProvider`2">
            <summary>
            Provides a new instance of a concrete type. Exposed over IServiceObjectProvider(Of I) interface.
            </summary>
            <typeparam name="T">A target service object type.</typeparam>
            <typeparam name="I">An interface to exposed to the requesting client.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.ConcreteServiceObjectProvider`2.#ctor(`0)">
            <summary>
            Initializes a new instance of ConcreteServiceObjectProvider with the target object.
            </summary>
            <param name="svc">A target service object.</param>
        </member>
        <member name="T:PerfEx.Infrastructure.CommandPattern.CommandExecutorRegistry">
            <summary>
            Specialize dependency registry for command executors.<br />
            This class is just an adapter to the real dependency registry.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.IDependencyRegistry">
            <summary>
            An abstract interface to the dependency registry.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyRegistry.Initialize">
            <summary>
            Initializes a dependency registry instance.<br />
            Usually implementors use this method to register types and objects to the registry.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyRegistry.Register``2">
            <summary>
            Add an entry to the dependency registry.
            </summary>
            <typeparam name="MapFrom">A type to map from.</typeparam>
            <typeparam name="MapTo">A type to map to.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyRegistry.Register``2(System.String)">
            <summary>
            Add an entry to the dependency registry.
            </summary>
            <typeparam name="MapFrom">A type to map from.</typeparam>
            <typeparam name="MapTo">A type to map to.</typeparam>
            <param name="name">A mapping name.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyRegistry.RegisterMultiple``2">
            <summary>
            Add an entry to the dependency registry.<br />
            This method allows the more than one registration to the same type.
            </summary>
            <typeparam name="MapFrom">A type to map from.</typeparam>
            <typeparam name="MapTo">A type to map to.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyRegistry.RegisterInstance``1(``0)">
            <summary>
            Add an entry to the dependency registry.
            </summary>
            <typeparam name="TType">A type of an instance to be reigsitered.</typeparam>
            <param name="instance">An instance to add to the dependency registry.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyRegistry.Register(System.Type,System.Type)">
            <summary>
            Add an entry to the dependency registry.
            </summary>
            <param name="typeMapFrom">A type to map from.</param>
            <param name="typeMapTo">A type to map to.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyRegistry.RegisterMultiple(System.Type,System.Type)">
            <summary>
            Add an entry to the dependency registry.<br />
            This method allows the more than one registration to the same type.
            </summary>
            <param name="typeMapFrom">A type to map from.</param>
            <param name="typeMapTo">A type to map to.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandExecutorRegistry.#ctor(PerfEx.Infrastructure.IDependencyRegistry)">
            <summary>
            Initializes a new instance of CommandExecutorRegistry with target registry.
            </summary>
            <param name="registry">The real target dependency registry.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandExecutorRegistry.RegisterCommandExecutor``2">
            <summary>
            Register the executor to the command.
            </summary>
            <typeparam name="TCmd">The command to be handled.</typeparam>
            <typeparam name="TExecutor">The command executor.</typeparam>
        </member>
        <member name="T:PerfEx.Infrastructure.ITypeMapper`2">
            <summary>
            ITypeMapper maps content of object from one type to related-type.<br />
            Such as mapping from DTO to Database Object.<br />
            Types implement ITypeMapper should declare both forward and reverse implementation,
            since they share the same members.
            </summary>
            <typeparam name="TFrom">Type to map on one end.</typeparam>
            <typeparam name="TTo">Type to map in the other end.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.ITypeMapper`2.Map(`0)">
            <summary>
            Map from source to the target type.
            </summary>
            <param name="obj">A source type instance.</param>
            <returns>A target type object.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.ITypeMapper`2.Map(`1)">
            <summary>
            Reverse map from the target to the source type.
            </summary>
            <param name="obj">A target type instance.</param>
            <returns>A source type object.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.Validation.DataAnnotationValidationError">
            <summary>
            Provides Validation Error information from data annotation attributes.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.Validation.ValidationError">
            <summary>
            Provides information about validation error.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.Validation.ValidationError.ToString">
            <summary>
            Eerror message contains in this object.
            </summary>
            <returns>An error message.</returns>
        </member>
        <member name="P:PerfEx.Infrastructure.Validation.ValidationError.ErrorMessage">
            <summary>
            An error message.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Validation.ValidationError.Instance">
            <summary>
            An object instance.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.Validation.DataAnnotationValidationError.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initialize a new DataAnnotationValidationError
            </summary>
            <param name="propertyName">property name.</param>
            <param name="errorMessage">error message.</param>
            <param name="instance">an object instance.</param>
        </member>
        <member name="P:PerfEx.Infrastructure.Validation.DataAnnotationValidationError.PropertyName">
            <summary>
            An error property.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.CommandPattern.SynchronousCommandExecutorBase`1">
            <summary>
            Base class for command executor which works synchronously.
            </summary>
            <typeparam name="T">The command type.</typeparam>
        </member>
        <member name="T:PerfEx.Infrastructure.CommandPattern.CommandExecutorBase`1">
            <summary>
            Base class for all command executor.<br />
            Provides the default implementation of the command executor.<br />
            This class is not intended to be derived directly, you should use Asynchronous or Synchronous CommandExecutorBase instead.
            </summary>
            <typeparam name="T">The command type.</typeparam>
        </member>
        <member name="T:PerfEx.Infrastructure.CommandPattern.ICommandExecutor`1">
            <summary>
            The executor used to executes the command.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.ICommandExecutor`1.Execute(`0,System.Action{`0})">
            <summary>
            Execute the command.
            </summary>
            <param name="command">THe command to be executed.</param>
            <param name="callback">The callback method notify the framework that the command execution has been done.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandExecutorBase`1.Execute(`0,System.Action{`0})">
            <summary>
            Initialize a new instance of the command executor.
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="callback">The callback action to call when command execution has finished.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandExecutorBase`1.RaiseExecuteCompleted">
            <summary>
            Notify the system that the command execution has been completed.<br />
            The command executor will response by calling callback.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandExecutorBase`1.InvokeCallbackCore(System.Action{`0},`0)">
            <summary>
            Overridable InvokeCallbackCore() will invoke the callback passed to the command executor.
            </summary>
            <param name="callback">Callback action to be invoke.</param>
            <param name="command">The executed command.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandExecutorBase`1.GetServiceObject``1(`0,PerfEx.Infrastructure.IServiceObjectProvider{``0})">
            <summary>
            Get the service object.<br />
            This method will get the service object from the command context, if exists.<br />
            Otherwise, it will use the service object provider to get access to the object.
            </summary>
            <param name="command">The command which might attach the command context.(optional)</param>
            <param name="svcProvider">The service provider for accessing the object if the context doesn't exists<br />
            or no object associated witht the context.</param>
            <returns>The service object.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.SynchronousCommandExecutorBase`1.ExecuteCore(`0)">
            <summary>
            Handle the command execution.
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.SynchronousCommandExecutorBase`1.ExecuteCommand(`0)">
            <summary>
            Inherited class should implement this method to do the actual command execution.
            </summary>
            <param name="command">The command object to be executed.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.SynchronousCommandExecutorBase`1.RaiseExecuteCompleted">
            <summary>
            Hides the base class method, since synchronous command should not call this method directly.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.MachineWebInfo">
            <summary>
            A web information for a machine.
            </summary>
        </member>
        <member name="F:PerfEx.Infrastructure.MachineWebInfo.MachineToGetInfoKey">
            <summary>
            The default configuration key to the url of a machine web info service.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.MachineWebInfo.GetMachineWebInfo(System.String)">
            <summary>
            Retrieves the MachineWebInfo from the service specified with the url.
            </summary>
            <param name="webInfoUrl">The url of the service to get the MachineWebInfo.</param>
            <returns>A MachineWebInfo information object.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.MachineWebInfo.Parse(System.IO.TextReader)">
            <summary>
            Parse a MachineWebInfo object from the TextReader stream.
            </summary>
            <param name="reader">The stream containing MachinWebInfo information.</param>
            <returns>The resulting MachineWebInfo instance.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.MachineWebInfo.WriteTo(System.IO.TextWriter)">
            <summary>
            Writes a MachineWebInfo object to the TextWriter stream.
            </summary>
            <param name="sb">The text stream to write information.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.MachineWebInfo.ToString">
            <summary>
            Provides the string information represent this MachinWebInfo.
            </summary>
            <returns>The string which represents this MachinWebInfo.</returns>
        </member>
        <member name="P:PerfEx.Infrastructure.MachineWebInfo.Instance">
            <summary>
            A singleton access to the MachineWebInfo instance.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.MachineWebInfo.IPAddress">
            <summary>
            An ip address.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.MachineWebInfo.MachineName">
            <summary>
            A machine name.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.ConfigHelper">
            <summary>
            Easy access and abstraction to the configuration settings.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.ConfigHelper.GetSetting(System.String)">
            <summary>
            Gets a configuration setting.
            </summary>
            <param name="key">A key to specified the configuration setting.</param>
            <returns></returns>
        </member>
        <member name="T:PerfEx.Infrastructure.FinalConfigHelper">
            <summary>
            Provides easy access to the AppSettings section in the configuration settings.
            </summary>
        </member>
        <member name="F:PerfEx.Infrastructure.FinalConfigHelper.Instance">
            <summary>
            Singleton access to the FinalConfigHelper instance.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.Mocking.ServiceObjectProviderStub`1">
            <summary>
            Provides easy access to a specified object with an IServiceObjectProvider interface.<br />
            The instance of this class will not be the part of an autoload system.<br />
            This class can clean up unused instance with an IDisposable pattern.
            </summary>
            <typeparam name="T">A target service object type.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.Mocking.ServiceObjectProviderStub`1.#ctor(`0)">
            <summary>
            Initializes a new instance of ServiceObjectProviderStub with the target object.
            </summary>
            <param name="svc">A target service object.</param>
        </member>
        <member name="T:PerfEx.Infrastructure.Mocking.ServiceObjectProviderStub`2">
            <summary>
            Provides easy access to a specified object with an IServiceObjectProvider(Of I) interface.<br />
            The instance of this class is not be a part of an autoload system.<br />
            This class can clean up unused instance with an IDisposable pattern.
            </summary>
            <typeparam name="T">A target service object type.</typeparam>
            <typeparam name="I">An interface to exposed to the requesting client.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.Mocking.ServiceObjectProviderStub`2.#ctor(`0)">
            <summary>
            Initializes a new instance of ServiceObjectProviderStub with the target object.
            </summary>
            <param name="svc">A target service object.</param>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.Async.IFetchData`2">
            <summary>
            Get list of data entities from the storage asynchronously.
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <typeparam name="TCmd">command type</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.Async.IFetchData`2.BeginList(`1,System.AsyncCallback)">
            <summary>
            List the data entities from the storage asynchronously.
            </summary>
            <param name="cmd">command use as an information to the method.</param>
            <param name="callback">Asynchronous callback invoked when the operation completed.</param>
            <returns>An asynchronous result, use for completing the asynchronous command(EndList).</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.Async.IFetchData`2.EndList(System.IAsyncResult,`1)">
            <summary>
            Finish the asynchronous action to the data storage.
            </summary>
            <param name="ar">The asynchronous result for accessing the operation information.</param>
            <param name="cmd">Just the dummy for distinguish the EndXXX method of this interface from the other methods.</param>
            <returns>The list of data entities specified in the command.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.CommandPattern.IAttachCommandContext">
            <summary>
            Specify this object may have the context attached to it.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.IAttachCommandContext.GetCommandContext">
            <summary>
            Get the attached command context.
            </summary>
            <returns>The command context.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.IAttachCommandContext.ReleaseContext">
            <summary>
            Destroy the attached command context.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.RegisterServiceObjectProvidersAttribute">
            <summary>
            Mark an assembly that framework should register service object providers from this assembly automatically.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.NonLoadedAttribute">
            <summary>
            Mark that the framework should skip loading the class.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.IDatabaseConnectionString">
            <summary>
            abstract interface for Database Connection String.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Data.IDatabaseConnectionString.ConnectionString">
            <summary>
            Gets the database connection string.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.LotUpdate.NoServerLotUpdateException">
            <summary>
            Occurs when the ILotRetriever didn't get update from the server for a while.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.CommandPattern.CommandManagerBase">
            <summary>
            Base class for implementing the command manager.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.RegisterReferenceExecutors(PerfEx.Infrastructure.CommandPattern.CommandExecutorRegistry,System.String)">
            <summary>
            Register the command executors from the referenced assemblies.
            </summary>
            <param name="registry">The command executor dependency registry object.</param>
            <param name="filter">The keyword provided in the RegisterCommandExecutorsAttribute to filter the assemblies to registered.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.#ctor(PerfEx.Infrastructure.IDependencyContainerAbstractFactory,PerfEx.Infrastructure.IDependencyRegistry)">
            <summary>
            Initialize the new instance of CommandManagerBase with pre-reigstered dependecy registry.
            </summary>
            <param name="factory">The dependency container abstract factory use to create all dependency-related classes.</param>
            <param name="registry">The pre-registered dependecy registry, contains the essential registrations shared with the other modules.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.#ctor(PerfEx.Infrastructure.IDependencyContainerAbstractFactory)">
            <summary>
            Initialize the new instance of CommandManagerBase.
            </summary>
            <param name="factory">The dependency container abstract factory use to create all dependency-related classes.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.Execute``1(``0,System.Action{``0})">
            <summary>
            Execute the command.
            </summary>
            <typeparam name="TCmd">command type</typeparam>
            <param name="command">The command to execute.</param>
            <param name="callback">a callback method</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.Execute``1(``0)">
            <summary>
            Execute the one-way command.
            </summary>
            <typeparam name="TCmd">command type</typeparam>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.Execute``1(``0,System.Action{``0},System.Object)">
            <summary>
            Execute the command.
            </summary>
            <typeparam name="TCmd">command type</typeparam>
            <param name="command">The command to be executed.</param>
            <param name="callback">The expression to be invoked when the command execution has completed.</param>
            <param name="additionalParameter">The parameter pass to the command executor before executing the command.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.RegisterReferenceExecutors(PerfEx.Infrastructure.CommandPattern.CommandExecutorRegistry,System.String,System.Reflection.Assembly[])">
            <summary>
            Register command executors from the provided assemblies.
            </summary>
            <param name="registry">The command executor dependency registry object.</param>
            <param name="filter">The keyword provided in the RegisterCommandExecutorsAttribute to filter the assemblies to registered.</param>
            <param name="assemblies">The list of assemblies to search for the command.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.InitCommandRegistry(PerfEx.Infrastructure.CommandPattern.CommandExecutorRegistry)">
            <summary>
            Initialize the list of relation between command and command executors.
            </summary>
            <param name="registry">The dependency registry use to register the command information.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.InitCommandExecutor``1(PerfEx.Infrastructure.CommandPattern.ICommandExecutor{``0},``0,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="TCmd"></typeparam>
            <param name="executor"></param>
            <param name="command"></param>
            <param name="additionalParameter"></param>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.ExecuteCommandExecutor``1(PerfEx.Infrastructure.CommandPattern.ICommandExecutor{``0},``0,System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TCmd"></typeparam>
            <param name="executor"></param>
            <param name="command"></param>
            <param name="callback"></param>
        </member>
        <member name="P:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.DependencyContainer">
            <summary>
            Gets a DependencyContainer instance used by this CommandManager.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.CommandPattern.CommandManagerBase.SkipRegisterDependencyContainer">
            <summary>
            Overridalbe, gets whether the instance of IDependencyContainer should be skip to register to the container or not, default is false.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.Resources.ErrMsg">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Resources.ErrMsg.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Resources.ErrMsg.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Resources.ErrMsg.Command_NoExecutor">
            <summary>
              Looks up a localized string similar to There is no registered executor for the command &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Resources.ErrMsg.Common_ValueShouldGreaterThanZero">
            <summary>
              Looks up a localized string similar to {0} should be greater than 0..
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Resources.ErrMsg.GetMachineWebInfo_InvalidFormat">
            <summary>
              Looks up a localized string similar to The input content contains an invalid format element..
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Resources.ErrMsg.GetMachineWebInfo_MissingAppSettings">
            <summary>
              Looks up a localized string similar to The application setting names &apos;{0}&apos; is missing. This setting is needed to get the default information..
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.ConnectionStringHelper">
            <summary>
            Easy access to connection string.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.ConnectionStringHelper.GetConnectionStringSettings(System.String)">
            <summary>
            Gets ConnectionStringSettings specified  with a key from configuration storage.
            </summary>
            <param name="key">The key of the connection string.</param>
            <returns>A ConnectionStringSettings object or null.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.ConnectionStringHelper.GetConnectionString(System.String)">
            <summary>
            Gets string containing the connection string for a key.
            </summary>
            <param name="key">The key of the connection string.</param>
            <returns>The connection string or null.</returns>
            <exception cref="T:System.NullReferenceException">Occurs when there's no connection string for the specified key.</exception>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.FinalConnectionStringHelper">
            <summary>
            Default implementation to access the connection string from configuration files.
            </summary>
        </member>
        <member name="F:PerfEx.Infrastructure.Data.FinalConnectionStringHelper.Instance">
            <summary>
            Singleton access to a FinalConnectionStringHelper instance.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.CommandPattern.AsynchronousCommandExecutorBase`1">
            <summary>
            Base class for the command executor which works asynchronously.<br />
            Implementor should invoke RaiseExecuteCompleted() method when the executor finish its task.
            </summary>
            <typeparam name="T">The command type.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.AsynchronousCommandExecutorBase`1.ExecuteCommand(`0)">
            <summary>
            Inherited class should implement this method to do the actual command execution.
            </summary>
            <param name="command">The command object to be executed.</param>
        </member>
        <member name="T:PerfEx.Infrastructure.Thai.JsDateTimeTypeMapper">
            <summary>
            Mapping between Thai culture and universal DateTime.<br />
            This class has singleton Instance and can also instantiate.
            </summary>
        </member>
        <member name="F:PerfEx.Infrastructure.Thai.JsDateTimeTypeMapper.Instance">
            <summary>
            Provides singleton access to the JsDateTimeTypeMapper instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerfEx.Infrastructure.Thai.JsDateTimeNullableTypeMapper" -->
        <member name="F:PerfEx.Infrastructure.Thai.JsDateTimeNullableTypeMapper.Instance">
            <summary>
            Provides singleton access to the JsDateTimeNullableTypeMapper instance.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.ObjectBuilder">
            <summary>
            Build object from various information sources.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.ObjectBuilder.BuildUp``1(``0,System.Collections.IDictionary)">
            <summary>
            Populate an object from a dictionary of properties' values.
            </summary>
            <typeparam name="T">A target object type.</typeparam>
            <param name="existing">An existing object to populate values to.</param>
            <param name="values">A dictionary of properties' values.</param>
            <returns>An input existing object.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.ObjectBuilder.BuildArray``1(System.Collections.ICollection)">
            <summary>
            Creates an array of object from a collection of dictionary of properties' values.
            </summary>
            <typeparam name="T">A target object type.</typeparam>
            <param name="col">A collection of dictionary of properties' values (e.g. an arry of Hashtable).</param>
            <returns>An array of target objects populated with properties' values.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.ObjectBuilder.BuildFromReader``1(System.Data.IDataReader)">
            <summary>
            Build a collection of objects from DataReader.
            </summary>
            <typeparam name="T">A target object type.</typeparam>
            <param name="reader">The database data reader.</param>
            <returns>A collection of target objects populated with data from the data reader.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.ObjectBuilder.Pack``1(System.Collections.IEnumerable,System.String[])">
            <summary>
            Creates an array of object from values to the properties specified.
            </summary>
            <typeparam name="T">A target object type.</typeparam>
            <param name="values">A collection of values to populate the objects.</param>
            <param name="paramNames">Names of the properties to populate in the same order of the values.<br />
            The values can be repeated but they must maintain the order of the properties.
            </param>
            <returns>An array of the populated objects.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.GlobalAdministratorRoles">
            <summary>
            Provides global access to the administrator roles.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.GlobalAdministratorRoles.Roles">
            <summary>
            Gets or sets the administrator roles.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.GlobalAdministratorRoles.SafeRoles">
            <summary>
            Gets the administrator roles. This method will return an empty array if there is no roles.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.IFetchData`2">
            <summary>
            Get list of data entities from the storage.
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <typeparam name="TCmd">command type</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.IFetchData`2.List(`1)">
            <summary>
            List the data entities from the storage.
            </summary>
            <param name="cmd">command use as an information to the method.</param>
            <returns>The list of data entities specified in the command.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.CommandPattern.ICommandContext">
            <summary>
            The context to attach to the command.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.ICommandContext.GetContextItem``1(PerfEx.Infrastructure.IServiceObjectProvider{``0})">
            <summary>
            Get the item from the current context if exists, <br />
            unless create and return a new one.
            </summary>
            <typeparam name="T">The type of object we need to obtain.</typeparam>
            <param name="svcProvider">Service object provider which create the object if not exists.</param>
            <returns></returns>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.IFetchSingleData`2">
            <summary>
            Get single data entity from the storage.
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <typeparam name="TCmd">command type</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.IFetchSingleData`2.Get(`1)">
            <summary>
            Get an entity from the database.
            </summary>
            <param name="cmd">command use as an information to the method.</param>
            <returns>The data entity specified in the command.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.PagingCalculator">
            <summary>
            Calculate paging information.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.PagingCalculator.Calculate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate the page information.
            </summary>
            <param name="pageSize">the number of items in one page.</param>
            <param name="currentPageIndex">the current page index (start from 0).</param>
            <param name="totalCount">the total number of items in all pages.</param>
            <param name="numberOfNearbyPages">The number of nearby pages to compute, any values less than or equal to 0 will result an _empty list.</param>
            <returns>PagingInformation with the computed result stored.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.PagingCalculator.CalculateInSlot(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate the page information.<br />
            But place the nearby pages in a slot manner.
            </summary>
            <param name="pageSize">the number of items in one page.</param>
            <param name="currentPageIndex">the current page index (start from 0).</param>
            <param name="totalCount">the total number of items in all pages.</param>
            <param name="numberOfNearbyPages">The number of nearby pages to compute.<br />
            This number is also use as a slot size of neary pages.<br />
            Any input values less than or equal to 0 will result an _empty list.</param>
            <returns>PagingInformation with the computed result stored.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.IExceptionAware">
            <summary>
            An interface indicates that the implementor has an exception awareness behavior.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.IExceptionAware.Exception">
            <summary>
            Gets or sets the exception which has occurred.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.IExceptionAware.ExceptionHandled">
            <summary>
            Gets or sets whether the exception has been handled, if it has occurred.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.IDependencyContainerAbstractFactory">
            <summary>
            An abstract interface to the abstract factory pattern to create the dependency registry and the dependency container.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyContainerAbstractFactory.CreateRegistry">
            <summary>
            Creates a dependency registry.
            </summary>
            <returns>A dependency registry instance.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyContainerAbstractFactory.CreateContainer(PerfEx.Infrastructure.IDependencyRegistry)">
            <summary>
            Creates a dependency container for the specified dependency registry.
            </summary>
            <param name="registry">A registered dependency registry.</param>
            <returns>A dependency container object populates with the information from the registry.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.RegisterValidatorsAttribute">
            <summary>
            Mark an assembly that the framework should register validators to the dependency registry automatically.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.DependencyContainerWrapper">
            <summary>
            Act as a proxy to the target dependency container.<br />
            In some scenarios we need to assign the target dependency container after the registration has been done.<br />
            This class allows you to register this dependency container to the registry then assign the target dependency container to this instance later.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.IDependencyContainer">
            <summary>
            Provides abstract interface to the dependency container.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyContainer.GetInstance(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyContainer.GetInstance(System.Type,System.String)">
            <summary>
            Get an instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyContainer.GetAllInstances(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType"/> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <returns>A sequence of instances of the requested <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyContainer.GetInstance``1">
            <summary>
            Get an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyContainer.GetInstance``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.IDependencyContainer.GetAllInstances``1">
            <summary>
            Get all instances of the given <typeparamref name="TService"/> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <returns>A sequence of instances of the requested <typeparamref name="TService"/>.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.Async.IDataAction`2">
            <summary>
            An abstract interface for asynchronously accessing the data storage, and take some action on the storage(asynchronously).<br />
            The action could be the Update, Delete or anything else which can works with no return information is needed.
            </summary>
            <typeparam name="TData">The information data or entity type.</typeparam>
            <typeparam name="TCmd">The command type.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.Async.IDataAction`2.BeginApplyAction(`0,`1,System.AsyncCallback)">
            <summary>
            Begin apply action to the data storage asynchronously.<br />
            The implementors should finish (end) the asynchronous operation before calling the callback method.
            </summary>
            <param name="data">The information data or entity.</param>
            <param name="cmd">The command object.</param>
            <param name="callback">Asynchronous callback invoked when the operation completed.</param>
            <returns>An asynchronous result, use for completing the asynchronous command(EndApplyAction).</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.Async.IFetchSingleData`2">
            <summary>
            Get single data entity from the storage asynchronously.
            </summary>
            <typeparam name="TEntity">entity type</typeparam>
            <typeparam name="TCmd">command type</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.Async.IFetchSingleData`2.BeginGet(`1,System.AsyncCallback)">
            <summary>
            Get an entity from the database asynchronously.
            </summary>
            <param name="cmd">command use as an information to the method.</param>
            <param name="callback">Asynchronous callback invoked when the operation completed.</param>
            <returns>The data entity specified in the command.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.Async.IFetchSingleData`2.EndGet(System.IAsyncResult,`1)">
            <summary>
            Finish the asynchronous action to retrieve the data.
            </summary>
            <param name="ar">The asynchronous result for accessing the operation information.</param>
            <param name="cmd">Just the dummy for distinguish the EndXXX method of this interface from the other methods.</param>
            <returns>The data entities specified in the command.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.Validation.ValidationHelper">
            <summary>
            Facilitates the process of getting and running the validators for a data entity.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.Validation.ValidationHelper.Validate``2(PerfEx.Infrastructure.IDependencyContainer,``0,``1)">
            <summary>
            Validate the data entity with validators with NullCommand, then validate with the exact type validators.
            </summary>
            <typeparam name="TEntity">data entity type.</typeparam>
            <typeparam name="TCmd">command type.</typeparam>
            <param name="container">The dependency container which hold the validators.</param>
            <param name="entity">The data entity to validate.</param>
            <param name="command">The optional command parameter for some validators.</param>
            <returns>A collection of errors.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.Validation.ValidationHelper.Validate``2(PerfEx.Infrastructure.IDependencyContainer,``0,``1,PerfEx.Infrastructure.Validation.ValidationErrorCollection)">
            <summary>
            Validate the data entity with validators with NullCommand, then validate with the exact type validators.
            </summary>
            <typeparam name="TEntity">data entity type.</typeparam>
            <typeparam name="TCmd">command type.</typeparam>
            <param name="container">The dependency container which hold the validators.</param>
            <param name="entity">The data entity to validate.</param>
            <param name="command">The optional command parameter for some validators.</param>
            <param name="errors">The collection to fill-in validation errors.</param>
        </member>
        <member name="T:PerfEx.Infrastructure.Validation.ValidationErrorCollection">
            <summary>
            Collection of ValidationError information.
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.DynamicDependencyRegistration">
            <summary>
            Register types to dependency registry dynamically in run-time.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.DynamicDependencyRegistration.RegisterReferenceServiceObjectProviders(PerfEx.Infrastructure.IDependencyRegistry)">
            <summary>
            Register service object providers from referenced assemblies.
            </summary>
            <param name="registry">The dependecy registry to register the service object providers to.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.DynamicDependencyRegistration.RegisterReferenceServiceObjectProviders(PerfEx.Infrastructure.IDependencyRegistry,System.Reflection.Assembly[])">
            <summary>
            Register service object providers from the specified assemblies.
            </summary>
            <param name="registry">The dependecy registry to register the service object providers to.</param>
            <param name="assemblies">An array of assemblies to find the service object proviers.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.DynamicDependencyRegistration.RegisterReferenceValidators(PerfEx.Infrastructure.IDependencyRegistry)">
            <summary>
            Register validators from referenced assemblies.
            </summary>
            <param name="registry">The dependecy registry to register the validators to.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.DynamicDependencyRegistration.RegisterReferenceValidators(PerfEx.Infrastructure.IDependencyRegistry,System.Reflection.Assembly[])">
            <summary>
            Register validators from the specified assemblies.
            </summary>
            <param name="registry">The dependecy registry to register the validators to.</param>
            <param name="assemblies">An array of assemblies to find the validators.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.DynamicDependencyRegistration.RegisterReferenceValidators(PerfEx.Infrastructure.IDependencyRegistry,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register validators from the specified validator types.
            </summary>
            <param name="registry">The dependecy registry to register the validators to.</param>
            <param name="validatorTypes">Validator types to register.</param>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.Async.ICreateData`2">
            <summary>
            Provides behavior to persist the data entity to the data storage asynchronously.
            </summary>
            <typeparam name="TEntity">The data entity type.</typeparam>
            <typeparam name="TCmd">The command use as an information to persist the entity.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.Async.ICreateData`2.BeginCreate(`0,`1,System.AsyncCallback)">
            <summary>
            Persist the data entity to the data storage.
            </summary>
            <param name="entity">The data entity which needs to save to the storage.</param>
            <param name="cmd">The command use as an information to the method.</param>
            <param name="callback">Asynchronous callback invoked when the operation completed.</param>
            <returns>The persisted data entitiy.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.Async.ICreateData`2.EndCreate(System.IAsyncResult,`0,`1)">
            <summary>
            Finish the asynchronous action to the data storage.
            </summary>
            <param name="ar">The asynchronous result for accessing the operation information.</param>
            <param name="entity">Just the dummy parameter for distinguish the EndXXX method of this interface from the other methods.</param>
            <param name="cmd">Just the dummy for distinguish the EndXXX method of this interface from the other methods.</param>
            <returns>The data entities created by the command.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.TextUtility">
            <summary>
            Provides conversion from currency to human-readable text.
            </summary>
        </member>
        <member name="F:PerfEx.Infrastructure.TextUtility.ThaiCulture">
            <summary>
            Provides a global access to the culture info for Thai. The default is 'th-TH'.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.TextUtility.CurrencyToText(System.Double,System.Globalization.CultureInfo)">
            <summary>
            Converts an amount to human-reable text.
            </summary>
            <param name="amount">An amount to be converted.</param>
            <param name="ci">CultureInfo of the resulting text.</param>
            <returns>The text containing human-readable of amount.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.TextUtility.CurrencyToText(System.Decimal,System.Globalization.CultureInfo)">
            <summary>
            Converts an amount to human-reable text.
            </summary>
            <param name="amount">An amount to be converted.</param>
            <param name="ci">CultureInfo of the resulting text.</param>
            <returns>The text containing human-readable of amount.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.TextUtility.CurrencyToText(System.Double)">
            <summary>
            Converts an amount to human-reable text.
            </summary>
            <param name="amount">An amount to be converted.</param>
            <returns>The text containing human-readable of amount.</returns>
        </member>
        <member name="M:PerfEx.Infrastructure.TextUtility.CurrencyToText(System.Decimal)">
            <summary>
            Converts an amount to human-reable text.
            </summary>
            <param name="amount">An amount to be converted.</param>
            <returns>The text containing human-readable of amount.</returns>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.PagingInformation">
            <summary>
            Information about paging for any list.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Data.PagingInformation.PageSize">
            <summary>
            The number of items in one page.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Data.PagingInformation.TotalNumberOfItems">
            <summary>
            The number of items in all pages.
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Data.PagingInformation.CurrentPageIndex">
            <summary>
            Index of the current page (start from 0).
            </summary>
        </member>
        <member name="P:PerfEx.Infrastructure.Data.PagingInformation.NearbyPages">
            <summary>
            ชุดของเลขหน้าที่ใกล้เคียงกับหน้าปัจจุบัน
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.CommandPattern.RegisterCommandExecutorsAttribute">
            <summary>
            Mark the assembly that it contains the executor for the specified filtered.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.CommandPattern.RegisterCommandExecutorsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of RegisterCommandExecutorsAttribute.
            </summary>
            <param name="name">The name use to filter the registration when calling from RegisterReferenceExecutors().</param>
        </member>
        <member name="P:PerfEx.Infrastructure.CommandPattern.RegisterCommandExecutorsAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:PerfEx.Infrastructure.Validation.ValidatorBase`2">
            <summary>
            Base class of the data validator.
            </summary>
            <typeparam name="TEntity">data entity type.</typeparam>
            <typeparam name="TCmd">command type.</typeparam>
        </member>
        <member name="T:PerfEx.Infrastructure.Validation.IValidator`2">
            <summary>
            Base interface of the data validator.
            </summary>
            <typeparam name="TEntity">data entity type.</typeparam>
            <typeparam name="TCmd">command type.</typeparam>
        </member>
        <member name="T:PerfEx.Infrastructure.Validation.IValidator">
            <summary>
            Base interface of the data validator.
            </summary>
        </member>
        <member name="M:PerfEx.Infrastructure.Validation.IValidator.Validate(System.Object,System.Object,PerfEx.Infrastructure.Validation.ValidationErrorCollection)">
            <summary>
            Validate the entity and put any errors to the collection.
            </summary>
            <param name="entity">The data entity to validate.</param>
            <param name="command">A command use as optional information of validation.</param>
            <param name="errors">An error collection.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.Validation.IValidator`2.Validate(`0,`1,PerfEx.Infrastructure.Validation.ValidationErrorCollection)">
            <summary>
            Validate the entity and put any errors to the collection.
            </summary>
            <param name="entity">The data entity to validate.</param>
            <param name="command">A command use as optional information of validation.</param>
            <param name="errors">An error collection.</param>
        </member>
        <member name="M:PerfEx.Infrastructure.Validation.ValidatorBase`2.Validate(`0,`1,PerfEx.Infrastructure.Validation.ValidationErrorCollection)">
            <summary>
            Validate the entity and put any errors to the collection.
            </summary>
            <param name="entity">The data entity to validate.</param>
            <param name="command">A command use as optional information of validation.</param>
            <param name="errors">An error collection.</param>
        </member>
        <member name="T:PerfEx.Infrastructure.Data.IDataAction`2">
            <summary>
            An abstract interface for accessing the data storage, and take some action on the storage.<br />
            The action could be the Update, Delete or anything else which can works with no return information is needed.
            </summary>
            <typeparam name="TData">The information data or entity type.</typeparam>
            <typeparam name="TCmd">The command type.</typeparam>
        </member>
        <member name="M:PerfEx.Infrastructure.Data.IDataAction`2.ApplyAction(`0,`1)">
            <summary>
            Take action to the data storage.
            </summary>
            <param name="data">The information data or entity.</param>
            <param name="cmd">The command object.</param>
        </member>
        <member name="T:PerfEx.Infrastructure.CommandPattern.NullCommand">
            <summary>
            Null type concept for Command.<br />
            This class is use in the sense of general command instead of a base class in the hierarchy.<br />
            Usage: DO NullCommand.Instance, DO NOT: new NullCommand().
            </summary>
        </member>
        <member name="F:PerfEx.Infrastructure.CommandPattern.NullCommand.Instance">
            <summary>
            Get the singleton instance of NullCommand.
            </summary>
        </member>
    </members>
</doc>
